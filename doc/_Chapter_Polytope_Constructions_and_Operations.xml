<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Polytope_Constructions_and_Operations">
<Heading>Polytope Constructions and Operations</Heading>

<Section Label="Chapter_Polytope_Constructions_and_Operations_Section_Extensions_amalgamations_and_quotients">
<Heading>Extensions, amalgamations, and quotients</Heading>

<ManSection>
  <Oper Arg="n" Name="UniversalPolytope" Label="for IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Constructs the universal polytope of rank <A>n</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> UniversalPolytope(3);
UniversalPolytope(3)
gap> Rank(last);
3
]]></Example>


<ManSection>
  <Oper Arg="M" Name="UniversalExtension" Label="for IsManiplex"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Constructs the universal extension of <A>M</A>, i.e. the maniplex with facets
 isomorphic to <A>M</A> that covers all other maniplexes with facets
 isomorphic to <A>M</A>.
Currently only defined for reflexible maniplexes.
 </Description>
</ManSection>


<Example><![CDATA[
gap> UniversalExtension(Cube(3));
regular 4-polytope of type [ 4, 3, infinity ] with infinity flags
]]></Example>


<ManSection>
  <Oper Arg="M, k" Name="UniversalExtension" Label="for IsManiplex, IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Constructs the universal extension of <A>M</A> with last entry of Schlafli symbol <A>k</A>.
 Currently only defined for reflexible maniplexes.
 </Description>
</ManSection>


<Example><![CDATA[
gap> UniversalExtension(Cube(3),2);
regular 4-polytope of type [ 4, 3, 2 ] with 96 flags
]]></Example>


<ManSection>
  <Oper Arg="M" Name="TrivialExtension" Label="for IsManiplex"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Constructs the trivial extension of <A>M</A>, also known as {<A>M</A>, 2}.
 </Description>
</ManSection>


<Example><![CDATA[
gap> TrivialExtension(Dodecahedron());
regular 4-polytope of type [ 5, 3, 2 ] with 240 flags
]]></Example>


<ManSection>
  <Oper Arg="M, k" Name="FlatExtension" Label="for IsManiplex, IsInt"/>
 <Returns>IsManiplex#! @Description Constructs the flat extension of <A>M</A> with last entry of Schlafli symbol <A>k</A>.  (As defined in <Emph>Flat Extensions of Abstract Polytopes</Emph> <Cite Key="Cun21"/>.)
</Returns>
 <Description>
Currently only defined for reflexible maniplexes.
 </Description>
</ManSection>


<Example><![CDATA[
gap> FlatExtension(Simplex(3),4);
reflexible 4-maniplex of type [ 3, 3, 4 ] with 48 flags
]]></Example>


<ManSection>
  <Oper Arg="M1, M2" Name="Amalgamate" Label="for IsManiplex, IsManiplex"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Constructs the amalgamation of <A>M1</A> and <A>M2</A>.
 Implicitly assumes that <A>M1</A> and <A>M2</A> are compatible.
Currently only defined for reflexible maniplexes.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Amalgamate(Cube(3),CrossPolytope(3));
reflexible 4-maniplex of type [ 4, 3, 4 ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Medial" Label="for IsManiplex"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given a 3-maniplex <A>M</A>, returns its medial.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Medial(Dodecahedron()));
[ [ 3, 5 ], 4 ]
]]></Example>


</Section>


<Section Label="Chapter_Polytope_Constructions_and_Operations_Section_Duality">
<Heading>Duality</Heading>

<ManSection>
  <Oper Arg="M" Name="Dual" Label="for IsManiplex"/>
 <Returns>The maniplex that is dual to <A>M</A>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> Dual(CrossPolytope(3));
Cube(3)
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsSelfDual" Label="for IsManiplex"/>
 <Returns>Whether this maniplex is isomorphic to its dual.
</Returns>
 <Description>
Also works for IsPoset objects.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsSelfDual(Cube(3));
false
gap> IsSelfDual(Simplex(5));
true
]]></Example>


<ManSection>
  <Prop Arg="M[, x]" Name="IsInternallySelfDual" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
Returns whether this maniplex is "internally self-dual", as defined by Cunningham and Mixer in
 <Cite Key="CunMix17"/> (<URL> https://doi.org/10.11575/cdm.v12i2.62785</URL>). 
 That is, if <A>M</A> is self-dual, and the automorphism of AutomorphismGroup(M) that induces
 the isomorphism between <A>M</A> and its dual is an inner automorphism.
 If the optional group element <A>x</A> is given, then we first check whether <A>x</A> is a dualizing
 automorphism of <A>M</A>, and if not, then we search the whole automorphism group of <A>M</A>.
 You can also input a string for <A>x</A>, in which case it is converted to <Code>SggiElement(M, x)</Code>.
 This property is only defined for rotary (chiral or reflexible) maniplexes.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsInternallySelfDual(Simplex(4));
true
gap> IsInternallySelfDual(Simplex(3), "r0")
#I  The given automorphism is not dualizing; searching for another...
true
gap> IsInternallySelfDual(Simplex(3), "r0 r1 r2 r0 r1 r0");
true
gap> IsInternallySelfDual(ToroidalMap44([6,0]));
false
gap> IsInternallySelfDual(ToroidalMap44([5,0]));
true
gap> IsInternallySelfDual(ToroidalMap44([1,2]));
false
gap> IsInternallySelfDual(Cube(3));
false
gap> M := InternallySelfDualPolyhedron2(10,1);;
gap> g := AutomorphismGroup(M);;
gap> IsInternallySelfDual(M, (g.1*g.3*g.2)^6);
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsExternallySelfDual" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
Returns whether this maniplex is "externally self-dual", as defined by Cunningham and Mixer in
 <Cite Key="CunMix17"/> (<URL> https://doi.org/10.11575/cdm.v12i2.62785</URL>). 
 That is, if <A>M</A> is self-dual, and the automorphism of AutomorphismGroup(M) that induces
 the isomorphism between <A>M</A> and its dual is an outer automorphism.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsExternallySelfDual(Simplex(4));
false
gap> IsExternallySelfDual(ToroidalMap44([6,0]));
true
gap> IsExternallySelfDual(ToroidalMap44([5,0]));
false
gap> IsExternallySelfDual(Cube(3));
false
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsProperlySelfDual" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
Returns whether this rooted maniplex is "properly self-dual", meaning that
 there is an isomorphism of <A>M</A> to its dual that preserves the flag-orbits.
 Note that all reflexible self-dual maniplexes are properly self-dual.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsProperlySelfDual(Cube(4));
false
gap> IsProperlySelfDual(Simplex(4));
true
gap> IsProperlySelfDual(ARP([4,5,4]));
true
gap> IsProperlySelfDual(ToroidalMap44([1,2]));
false
gap> IsProperlySelfDual(RotaryManiplex([4,4,4],"(s2^-1 s1) (s2 s1^-1)^3, (s2 s3^-1) (s2^-1 s3)^3"));
true
gap> IsProperlySelfDual(RotaryManiplex([4,4,4],"(s2^-1 s1)^3 (s2 s1^-1), (s2 s3^-1) (s2^-1 s3)^3"));
false
]]></Example>


<ManSection Label="AutoDoc_generated_group1">
<Heading>Petrie Dual</Heading>
  <Attr Arg="M" Name="Petrial" Label="for IsManiplex"/>
 <Returns>The Petrial (Petrie dual) of <A>M</A>.
</Returns>
 <Description>
Note that this is not necessarily a polytope, even if <A>M</A> is.
 When Rank(M) > 3, this is the "generalized Petrial" which essentially
 replaces <Math>r_{n-3}</Math> with <Math>r_{n-3} r_{n-1}</Math> in the set of generators. 
<P/>
 Synonym for the command is <Code>PetrieDual</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Petrial(HemiCube(3));
ReflexibleManiplex([ 3, 3 ], "((r0 r2)*r1*r2)^3,z1^4")
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsSelfPetrial" Label="for IsManiplex"/>
 <Returns>Whether this maniplex is isomorphic to its Petrial.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> s0 := ( 2, 3)( 4, 6)( 7,10)( 9,12)(11,14)(13,15);;
gap> s1 := ( 1, 2)( 3, 5)( 4, 7)( 6, 9)( 8,11)(10,13)(12,15)(14,16);;
gap> s2 := ( 2, 4)( 3, 6)( 5, 8)( 9,12)(11,15)(13,14);;
gap> poly := Group([s0,s1,s2]);;
gap> p:=ARP(poly);
regular 3-polytope
gap> IsSelfPetrial(p);
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="DirectDerivates" Label="for IsManiplex"/>
 <Description>
 Returns a list of the <Emph>direct derivates</Emph> of <A>M</A>, which are
 the images of M under duality and Petriality. A 3-maniplex has up to
 6 direct derivates, and an n-maniplex with <Math>n \geq 4</Math> has up to 8.
 If the option 'polytopal' is set, then only returns those direct
 derivates that are polytopal.
 </Description>
</ManSection>


<Example><![CDATA[
gap> DirectDerivates(Cube(3));
[ Cube(3), CrossPolytope(3), ReflexibleManiplex([ 6, 3 ], "z1^4"), 
  ReflexibleManiplex([ 6, 4 ], "z1^3"), ReflexibleManiplex([ 3, 6 ], "(r2*r1*r0)^4"), 
  ReflexibleManiplex([ 4, 6 ], "(r2*r1*r0)^3") ]
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsKaleidoscopic" Label="for IsMapOnSurface"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
Returns whether the map <A>M</A> with <Math>q</Math>-valent vertices is <Emph>kaleidoscopic</Emph>,
 meaning that for each integer e in [2..q-1] that is coprime to q, the map
 Hole(M, e) is isomorphic to M as a rooted map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := AbstractRegularPolytope([4,5], "(r0 r1 r2)^5");;
gap> ForAll([2,3,4], e -> IsIsomorphicRootedManiplex(Hole(M,e), M));
true
gap> IsKaleidoscopic(M);
true
gap> Filtered(SmallChiralPolyhedra(200), IsKaleidoscopic);
[ ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ExponentGroup" Label="for IsMapOnSurface"/>
 <Description>
Given a map <A>M</A> with constant valency q, returns a list of those integers <Math>e</Math> in <Math>\{1, ..., q-1\}</Math>
 such that <Math>M^e</Math> is isomorphic to <Math>M</Math>. That is, such that Hole(M,e) is isomorphic to <A>M</A> as a rooted map. 
 Note that despite the name, this is simply a list and not a group.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ExponentGroup(ToroidalMap44([3,0]));
[ 1, 3 ]
gap> ExponentGroup(ToroidalMap44([1,2]));
[ 1 ]
gap> ExponentGroup(ReflexibleManiplex([10,10], "(r0 r1 r2)^2"));
[ 1, 3, 7, 9 ]
]]></Example>


</Section>


<Section Label="Chapter_Polytope_Constructions_and_Operations_Section_Mixing_of_Maniplexes_functions">
<Heading>Mixing of Maniplexes functions</Heading>

<ManSection Label="Mix">
<Heading>Mix of groups</Heading>
  <Oper Arg="g, h" Name="Mix" Label="for IsPermGroup, IsPermGroup"/>
 <Returns><Code>IsGroup </Code>.
</Returns>
 <Description>
Given two groups (either both permutation groups or both FpGroups), returns the mix of those groups.
 If g and h are permutation groups of degree m and n, respectively, then the mix is a permutation group of degree
 m+n.
 </Description>
</ManSection>


 Here we build the mix of the connection groups of a 3-cube and an edge.
<Example><![CDATA[
gap> g1:=ConnectionGroup(Cube(3));
<permutation group with 3 generators>
gap> g2:=ConnectionGroup(Edge());
Group([ (1,2) ])
gap> Mix(g1,g2);
<permutation group with 3 generators>
]]></Example>


<ManSection>
  <Oper Arg="maniplex, maniplex" Name="Mix" Label="for IsPremaniplex, IsPremaniplex"/>
 <Returns><Code>IsReflexibleManiplex </Code>.
</Returns>
 <Description>
Given two (pre-)maniplexes, returns their mix. For two reflexible maniplexes returns the IsReflexibleManiplex from the mix of their connection groups. In general, it returns the "flag mix" of the two maniplexes (see <Code>FlagMix</Code>).
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="maniplex, maniplex" Name="FlagMix" Label="for IsPremaniplex, IsPremaniplex"/>
 <Returns><Code>IsManiplex </Code>.
</Returns>
 <Description>
Given two (pre-)maniplexes p, q this returns the (pre-)maniplex of their
 "flag" mix. That is, it constructs the mix of their connection groups, keeps
 the connected component with the base flags of p and q, and then builds a maniplex
 from this.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := ToroidalMap44([1,2]);;
gap> FlagMix(M,M) = M;
true
gap> R := FlagMix(M, EnantiomorphicForm(M));
3-maniplex with 200 flags
gap> IsReflexible(R);
true
gap> R = ToroidalMap44([5,0]);
true
]]></Example>


<ManSection Label="Comix">
<Heading>Comix</Heading>
  <Oper Arg="fpgroup, fpgroup" Name="Comix" Label="for IsFpGroup, IsFpGroup"/>
  <Oper Arg="maniplex, maniplex" Name="Comix" Label="for IsReflexibleManiplex, IsReflexibleManiplex"/>
 <Returns><Code>IsReflexibleManiplex </Code>.
</Returns>
 <Description>
 Returns the comix of two Finitely Presented groups gp and gq.
Given maniplexes returns the IsReflexibleManiplex from the comix of their connection groups
 </Description>
</ManSection>


<ManSection Label="Tools">
<Heading>Indexed array tools</Heading>
  <Oper Arg="int, int, int, int" Name="CtoL" Label="for IsInt,IsInt,IsInt,IsInt"/>
 <Returns><Code>IsInteger </Code>.
</Returns>
 <Description>
CtoL Returns an integer between 1 and N*M associated with the pair [a,b].
 LtoC Returns an ordered pair [a,b] associated with the integer between 1 and N*M.
 a should range between 1 and N, and b should range between 1 and M
 N is how many columns (x coordinates), M is how many rows (y coordinates) in a matrix
 Functions are inverses.
 </Description>
</ManSection>


<Example><![CDATA[
gap> LtoC(5,4,14);
[ 1, 2 ]
gap> CtoL(3,2,5,4);
8
gap> LtoC(8,5,4);
[ 3, 2 ]
]]></Example>


</Section>


<Section Label="Chapter_Polytope_Constructions_and_Operations_Section_Products">
<Heading>Products</Heading>

<ManSection Label="Pyramid">
<Heading>Pyramids</Heading>
  <Oper Arg="M" Name="Pyramid" Label="for IsManiplex"/>
  <Oper Arg="k" Name="Pyramid" Label="for IsInt"/>
 <Description>
In the first form, returns the pyramid over <A>M</A>.
In the second form, returns the pyramid over a <A>k</A>-gon.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Pyramid(Cube(3)));
[ [ 3, 4 ], [ 3, 4 ], 3 ]
gap> SchlafliSymbol(Pyramid(4));
[ [ 3, 4 ], [ 3, 4 ] ]
]]></Example>


<ManSection Label="Prisms">
<Heading>Prisms</Heading>
  <Oper Arg="M" Name="Prism" Label="for IsManiplex"/>
  <Oper Arg="k" Name="Prism" Label="for IsInt"/>
 <Description>
In the first form, returns the prism over <A>M</A>.
In the second form, returns the prism over a <A>k</A>-gon.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Cube(3)=Prism(Cube(2));
true
gap> Prism(4)=Cube(3);
true
]]></Example>


<ManSection Label="Antiprisms">
<Heading>Antiprisms</Heading>
  <Oper Arg="M" Name="Antiprism" Label="for IsManiplex"/>
  <Oper Arg="k" Name="Antiprism" Label="for IsInt"/>
 <Description>
In the first form, returns the antiprism over <A>M</A>.
In the second form, returns the antiprism over a <A>k</A>-gon.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Antiprism(Dodecahedron()));
[ [ 3, 5 ], [ 3, 5 ], 4 ]
gap> SchlafliSymbol(Antiprism(5));
[ [ 3, 5 ], 4 ]
]]></Example>


<ManSection>
  <Oper Arg="M1, M2" Name="JoinProduct" Label="for IsManiplex, IsManiplex"/>
 <Returns>Maniplex
</Returns>
 <Description>
Given two maniplexes, this forms the join product.
 May give weird results if the maniplexes aren't faithfully represented
 by their posets.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(last);
[ [ 3, 4 ], [ 3, 4 ], [ 3, 4 ], [ 3, 4 ], 3 ]
]]></Example>


<ManSection>
  <Oper Arg="M1, M2" Name="CartesianProduct" Label="for IsManiplex, IsManiplex"/>
 <Returns>Maniplex
</Returns>
 <Description>
Given two maniplexes, this forms the cartesian product.
 May give weird results if the maniplexes aren't faithfully represented
 by their posets.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(CartesianProduct(HemiCube(3),Simplex(2)));
[ [ 3, 4 ], 3, 3, 3 ]
]]></Example>


<ManSection>
  <Oper Arg="M1, M2" Name="DirectSumOfManiplexes" Label="for IsManiplex, IsManiplex"/>
 <Returns>Maniplex
</Returns>
 <Description>
Given two maniplexes, this forms the direct sum.
 May give weird results if the maniplexes aren't faithfully represented
 by their posets.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(DirectSumOfManiplexes(HemiCube(3),Simplex(2)));
[ [ 3, 4 ], [ 3, 4 ], [ 3, 4 ], [ 3, 4 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M1, M2" Name="TopologicalProduct" Label="for IsManiplex, IsManiplex"/>
 <Returns>Maniplex
</Returns>
 <Description>
Given two maniplexes, this forms the direct sum.
 May give weird results if the maniplexes aren't faithfully represented
 by their posets.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(TopologicalProduct(HemiCube(3),Simplex(2)));
[ 4, 3, [ 3, 4 ] ]
]]></Example>


</Section>


</Chapter>

