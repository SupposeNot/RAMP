<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Using_RAMP">
<Heading>Using RAMP</Heading>

<Section Label="Chapter_Using_RAMP_Section_Assumptions">
<Heading>Assumptions</Heading>

 There are a few assumptions that many methods make.
<P/>
 1. The connection group of a maniplex with N flags is often assumed to act on [1..N].
 This is gradually being rewritten to allow any set of integers as flags, but use caution
 when working with such connection groups.
<P/>
 2. When working with a connection group  <Math>\langle r_0, \ldots, r_{n-1} \rangle</Math>, some methods may
 have strange behavior if any <Math>r_i</Math> or <Math>r_i r_j</Math> has any fixed points. Indeed, Sggis
 of that type define pre-maniplexes rather than maniplexes. Eventually, the methods that
 build maniplexes will verify that no <Math>r_i</Math> or <Math>r_i r_j</Math> has fixed points.
<P/>
</Section>


<Section Label="Chapter_Using_RAMP_Section_Extending_RAMP">
<Heading>Extending RAMP</Heading>

 Suppose you want to add a new operation on maniplexes to RAMP. We will see how to accomplish that
 with a hypothetical example. Let's pretend that there's a mathematical operation on maniplexes called "Stretch".
<P/>
 Our first step will be to create two new files in the lib/ directory: stretch.gd and stretch.gi. The first
 file is for the declaration of the new operation, and the second is for the implementation.
<P/>
 In stretch.gd, we want to add a line that declares the new operation, something like this:
<Example><![CDATA[
DeclareOperation("Stretch", IsManiplex);
]]></Example>


 Now we will write the implementation in stretch.gi:
<Example><![CDATA[
InstallMethod(Stretch, 
		[IsManiplex],
		function(M)
		...actual code goes here...
		end);
]]></Example>


 Finally, we need to make sure that these new files are read when RAMP is loaded up. Open up init.g (in the root RAMP
 directory) and add the line
<Example><![CDATA[
ReadPackage( "ramp", "lib/stretch.gd" ); 
]]></Example>


 (We recommend that you put that line in alphabetical order with the rest.) Similarly, open up read.g and
 add the line
<Example><![CDATA[
ReadPackage( "ramp", "lib/stretch.gi" ); 
]]></Example>


 Now your code is available in your copy of RAMP!
<P/>
 Here are two more things you should do. First, test your code. Create a new file called stretch.tst in the
 tst directory of RAMP. The format of the tests is that you first write a line that starts with "gap> "
 and continues with some input, as if you actually typed it in to the GAP prompt. Then, on the following line,
 put the expected output.
<P/>
 To run your tests, run the following command in RAMP:
<Example><![CDATA[
gap> TestRamp("stretch.tst");
]]></Example>


 If any tests fail (that is, if the output from GAP does not match the expected output from your test file),
 then GAP will alert you to the discrepancies. Otherwise, when the tests are complete, there will be no output
 and you will just see the gap> prompt again. 
<P/>
 You can also call TEST_RAMP() to run all of the tests in the /tst directory.
<P/>
 Finally, you should document your operation! Take a look at one of the .gd files included with RAMP to see
 what you should include. To actually build the documentation, you will need the package AutoDoc. For
 example, the following will rebuild the documentation:
<Example><![CDATA[
gap> LoadPackage("AutoDoc");
gap> AutoDoc("ramp", rec( scaffold := true, autodoc := true));
]]></Example>


 To see your updated documentation, you can either navigate to the html file in the doc/ directory, or
 you can quit GAP and restart it, and then your documentation will be available in the inline help.
 If you have LaTeX set up properly, then it will also build a pdf manual.
<P/>
</Section>


</Chapter>

