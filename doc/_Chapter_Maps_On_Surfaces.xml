<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Maps_On_Surfaces">
<Heading>Maps On Surfaces</Heading>

<Section Label="Chapter_Maps_On_Surfaces_Section_Bicontactual_regular_maps">
<Heading>Bicontactual regular maps</Heading>

 The names for the maps in this section are from S.E. Wilson's <Cite Key="Wil85"/>. 
<ManSection>
  <Oper Arg="k" Name="Epsilonk" Label="for IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given an integer <A>k</A>, gives the map <Math>\epsilon_k</Math>, which is <Math>\{k,2\}_k</Math> when <A>k</A> is even, and <Math>\{k,2\}_{2k}</Math> when <A>k</A> is odd.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Epsilonk(5);
AbstractRegularPolytope([ 5, 2 ])
gap> Epsilonk(6);
AbstractRegularPolytope([ 6, 2 ])
]]></Example>


<ManSection>
  <Oper Arg="k" Name="Deltak" Label="for IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given an integer <A>k</A>, gives the map <Math>\delta_k</Math>, which is <Math>\{2k,2\}/2</Math> when <A>k</A> is even, and <Math>\{2k,2\}_{k}</Math> when <A>k</A> is odd.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Deltak(5);
AbstractRegularPolytope([ 10, 2 ], "(r0 r1)^5 r2")
gap> Deltak(6);
AbstractRegularPolytope([ 12, 2 ], "(r0 r1)^6 r2")
]]></Example>


<ManSection>
  <Oper Arg="k" Name="Mk" Label="for IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given an integer <A>k</A>, gives the map <Math>M_k</Math>, which is <Math>\{2k,2k\}_{1,0}</Math> when <A>k</A> is even, and <Math>\{2k,k\}_{2}</Math> when <A>k</A> is odd.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Mk(5);Mk(6);
AbstractRegularPolytope([ 10, 5 ], "(r0 r1)^5 r0 = r2")
AbstractRegularPolytope([ 12, 12 ], "(r0 r1)^6 r0 = r2")
]]></Example>


<ManSection>
  <Oper Arg="k" Name="MkPrime" Label="for IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given an integer <A>k</A>, gives the map <Math>M'_k</Math>, which is <Math>\{k,k\}_2</Math> when <A>k</A> is even, and <Math>\{k,2k\}_{2}</Math> when <A>k</A> is odd.
 <Code>MkPrime(k,i)</Code> gives the map <Math>M'_{k,i}</Math>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> MkPrime(5);MkPrime(6);
ReflexibleManiplex([ 5, 10 ], "(r2*r1*(r0 r2))^5,z1^2")
ReflexibleManiplex([ 6, 6 ], "(r2*r1*(r0 r2))^6,z1^2")
]]></Example>


<ManSection>
  <Oper Arg="k, l" Name="Bk2l" Label="for IsInt,IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given integers <A>k,l</A>, gives the map <Math>B(k,2l)</Math>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Bk2l(4,5);
3-maniplex with 80 flags
]]></Example>


<ManSection>
  <Oper Arg="k, l" Name="Bk2lStar" Label="for IsInt,IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given integers <A>k,l</A>, gives the map <Math>B^*(k,2l)</Math>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Bk2lStar(5,7);
3-maniplex with 140 flags
]]></Example>


</Section>


<Section Label="Chapter_Maps_On_Surfaces_Section_Operations_on_reflexible_maps">
<Heading>Operations on reflexible maps</Heading>

<ManSection>
  <Oper Arg="map" Name="Opp" Label="for IsManiplex"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Forms the opposite map of the maniplex <A>map</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Opp(Bk2lStar(5,7));
Petrial(Dual(Petrial(3-maniplex with 140 flags)))
]]></Example>


<ManSection>
  <Oper Arg="map, j" Name="Hole" Label="for IsManiplex,IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given <A>map</A> and integer <Math>j</Math>, will form the map <Math>H_j(map)</Math>. Note that if the action of <Math>[r_0,(r_1 r_2)^{j-1} r_1, r_2]</Math> on the flags forms multiple orbits, then the resulting map will be on just one of those orbits.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Hole(Bk2lStar(5,7),2);
3-maniplex with 140 flags
]]></Example>


</Section>


<Section Label="Chapter_Maps_On_Surfaces_Section_Map_properties">
<Heading>Map properties</Heading>

<ManSection>
  <Attr Arg="M" Name="IsMapOnSurface" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether a given maniplex is a map on a surface
 </Description>
</ManSection>


<Example><![CDATA[
gap> Filtered([HemiCube(3),Cube(4),Icosahedron()],IsMapOnSurface);
[ HemiCube(3), Icosahedron() ]
]]></Example>


</Section>


<Section Label="Chapter_Maps_On_Surfaces_Section_Operations_on_maps">
<Heading>Operations on maps</Heading>

<ManSection>
  <Oper Arg="map" Name="Truncation" Label="for IsMapOnSurface"/>
 <Returns>trunc_map
</Returns>
 <Description>
Given a <A>map</A> on a surface, this function will return the truncation of <A>map</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Truncation(Simplex(3)));
[ [ 3, 6 ], 3 ]
gap> TruncatedTetrahedron()=Truncation(Simplex(3));
true
gap> Truncation(CrossPolytope(3))=TruncatedOctahedron();
true
gap> Truncation(Cube(3))=TruncatedCube();
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Snub" Label="for IsMapOnSurface"/>
 <Returns>snub_map
</Returns>
 <Description>
Returns the snub of a given map; we require that the map have triangles as vertex figures.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Snub(Dodecahedron())=SnubDodecahedron();
true
gap> Snub(Cube(3))=SnubCube();
true
gap> Snub(Simplex(3))=Icosahedron();
true
gap> Snub(CrossPolytope(3))=SnubCube();
true
gap> Snub(Dual(Cube(3)))=Reflection(Snub(Reflection(Cube(3))));
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Chamfer" Label="for IsMapOnSurface"/>
 <Returns>chamfered_map
</Returns>
 <Description>
Returns the map obtained from the chamfering operation described in <Cite Key="Rio14"/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> s0 := (4,5)(6,7)(8,9);;
gap> s1 := (2,6)(3,4)(5,7);;
gap> s2 := (1,2)(4,8)(5,9);;
gap> poly := Group([s0,s1,s2]);;
gap> p:=ARP(poly);;
gap> SchlafliSymbol(p);
[ 6, 3 ]
gap> ch:=Chamfer(p);
3-maniplex with 432 flags
gap> SchlafliSymbol(ch);
[ 6, 3 ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Subdivision1" Label="for IsMapOnSurface"/>
 <Returns>Su1
</Returns>
 <Description>
Returns the One-dimensional subdivision of a map, which replaces each edge with two edges. For more information on the oriented version of this, see <Cite Key="BerPisWil17"/>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m:=Subdivision1(Simplex(3));
3-maniplex with 48 flags
gap> SchlafliSymbol(m);
[ 6, [ 2, 3 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Subdivision2" Label="for IsMapOnSurface"/>
 <Returns>Su2
</Returns>
 <Description>
Returns the two-dimensional subdivision of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Subdivision2(Cube(3)));
[ 3, [ 4, 6 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="BarycentricSubdivision" Label="for IsMapOnSurface"/>
 <Returns>barycentric_subdivision
</Returns>
 <Description>
Gives the barycentric subdivision of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m:=BarycentricSubdivision(Cube(3));;
gap> SchlafliSymbol(m);NumberOfFacets(m);
[ 3, [ 4, 6, 8 ] ]
48
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Leapfrog" Label="for IsMapOnSurface"/>
 <Returns>leapfrog
</Returns>
 <Description>
Gives the result of performing the leapfrog operation on a map on a surface
 </Description>
</ManSection>


<Example><![CDATA[
gap> Leapfrog(Dodecahedron());
3-maniplex with 360 flags
gap> SchlafliSymbol(last);
[ [ 5, 6 ], 3 ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="CombinatorialMap" Label="for IsMapOnSurface"/>
 <Returns>combinatorial_map
</Returns>
 <Description>
Gives the result of combinatorial operation on a map; this is equivalent to taking the dual of the barycentric subdivision.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfEdges(Cube(3));
12
gap> NumberOfEdges(CombinatorialMap(Cube(3)));
72
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Angle" Label="for IsMapOnSurface"/>
 <Returns>angle_map
</Returns>
 <Description>
Returns the angle map of a map. This is equivalent to taking the dual of the medial.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfEdges(ToroidalMap44([3,0]));
18
gap> NumberOfEdges(Angle(ToroidalMap44([3,0])));
36
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Gothic" Label="for IsMapOnSurface"/>
 <Returns>gothic
</Returns>
 <Description>
Returns the result of performing the gothic operation to a map. This is the same as taking the dual of the medial of the truncation of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m:=AbstractRegularPolytope([ 3, 6 ], "(r0 r1 r2)^6");;
gap> NumberOfEdges(m); NumberOfEdges(Gothic(m));
27
162
]]></Example>


</Section>


<Section Label="Chapter_Maps_On_Surfaces_Section_Conway_polyhedron_operator_notation">
<Heading>Conway polyhedron operator notation</Heading>

 We include here operators from Wikipedia that are not included above.
<List>
<Item>
<Code>MapJoin</Code>: Creates quadrilateral faces by placing a node in each face, and then the set of edges are formed by the nodes corresponding to incident vertex-face pairs. This is another name for <Code>Angle</Code>.
</Item>
<Item>
<Code>Ambo</Code>: This is another name for <Code>Medial</Code>.
</Item>
</List>
 Another excellent source for information on these types of operations is <Code>https://antitile.readthedocs.io/en/latest/conway.html</Code>. Additional functions are described below.
<ManSection>
  <Oper Arg="M" Name="Reflection" Label="for IsManiplex"/>
 <Returns>reflection
</Returns>
 <Description>
Reverses the orientation of a maniplex.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Gyro(Dual(m))=Reflection(Gyro(Reflection(m)));
true
gap> Reflection(m)=EnantiomorphicForm(m);
true
gap> Reflection(Truncation(m))=Truncation(EnantiomorphicForm(m));
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Kis" Label="for IsMapOnSurface"/>
 <Returns>kis
</Returns>
 <Description>
Returns the Kis of the map, which erects a pyramid over each of the faces.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Kis(Cube(3));
3-maniplex with 144 flags
gap> SchlafliSymbol(last);
[ 3, [ 4, 6 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Needle" Label="for IsMapOnSurface"/>
 <Returns>needle
</Returns>
 <Description>
Performs the needle operation to the map: edges connect adjacent face centers, and face centers to incident vertices.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Needle(Cube(3)));
[ 3, [ 3, 8 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Zip" Label="for IsMapOnSurface"/>
 <Returns>zip
</Returns>
 <Description>
Returns the zip of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Zip(Cube(3))=TruncatedOctahedron();
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Ortho" Label="for IsMapOnSurface"/>
 <Returns>ortho
</Returns>
 <Description>
Returns the ortho of the map (this is the same as applying the join twice.).
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Ortho(Cube(3)));
[ 4, [ 3, 4 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Expand" Label="for IsMapOnSurface"/>
 <Returns>expand
</Returns>
 <Description>
Returns the expand of the map (this is the same as applying the ambo operation twice.).
 </Description>
</ManSection>


<Example><![CDATA[
gap> Expand(Cube(3))=SmallRhombicuboctahedron();
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Gyro" Label="for IsMapOnSurface"/>
 <Returns>gyro
</Returns>
 <Description>
Returns the gyro of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Gyro(Dual(Cube(3)))=Gyro(Cube(3));
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Meta" Label="for IsMapOnSurface"/>
 <Returns>meta
</Returns>
 <Description>
Constructs the meta of the given map. (This is the same as applying first the join, and then the kis operation to the map).
 </Description>
</ManSection>


<Example><![CDATA[
gap> Size(Cube(3))=NumberOfFacets(Meta(Cube(3)));
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Bevel" Label="for IsMapOnSurface"/>
 <Returns>bevel
</Returns>
 <Description>
Constructs the bevel of a given map. (This is the same as truncating the ambo of a map.)
 </Description>
</ManSection>


<Example><![CDATA[
gap> CombinatorialMap(Cube(3))=Bevel(Cube(3));
true
]]></Example>


</Section>


<Section Label="Chapter_Maps_On_Surfaces_Section_Extended_operations">
<Heading>Extended operations</Heading>

 A number of these were introduced by George Hart.
<ManSection>
  <Oper Arg="M" Name="Subdivide" Label="for IsMapOnSurface"/>
 <Returns>u
</Returns>
 <Description>
Returns the subdivide (u) of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Chamfer(Dual(Cube(3)))=Dual(Subdivide(Cube(3)));
true
gap> SchlafliSymbol(Subdivide(Cube(3)));
[ [ 3, 4 ], [ 3, 6 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Propeller" Label="for IsMapOnSurface"/>
 <Returns>propeller
</Returns>
 <Description>
Constructs the propeller of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Dual(Propeller(Cube(3)))=Propeller(Dual(Cube(3)));
true
gap> Dual(Propeller(Dual(Cube(3))))=Propeller(Cube(3));
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Loft" Label="for IsMapOnSurface"/>
 <Returns>loft
</Returns>
 <Description>
Constructs the loft of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfFacets(Loft(Cube(3)));
30
gap> SchlafliSymbol(Loft(Cube(3)));
[ 4, [ 3, 6 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Quinto" Label="for IsMapOnSurface"/>
 <Returns>quinto
</Returns>
 <Description>
Constructs the quinto of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Quinto(Cube(3)));
[ [ 4, 5 ], [ 3, 4 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="JoinLace" Label="for IsMapOnSurface"/>
 <Returns>join-lace
</Returns>
 <Description>
Constructs the join-lace of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(JoinLace(Cube(3)));
[ [ 3, 4 ], [ 4, 6 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Lace" Label="for IsMapOnSurface"/>
 <Returns>lace
</Returns>
 <Description>
Constructs the lace of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Lace(Cube(3)));
[ [ 3, 4 ], [ 4, 9 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Stake" Label="for IsMapOnSurface"/>
 <Returns>stake
</Returns>
 <Description>
Constructs the stake of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Stake(Cube(3)));
[ [ 3, 4 ], [ 3, 4, 9 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Whirl" Label="for IsMapOnSurface"/>
 <Returns>whirl
</Returns>
 <Description>
Constructs the whirl of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Whirl(Cube(3)));
[ [ 4, 6 ], 3 ]              ^
gap> SchlafliSymbol(Whirl(Icosahedron()));
[ [ 3, 6 ], [ 3, 5 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Volute" Label="for IsMapOnSurface"/>
 <Returns>volute
</Returns>
 <Description>
Constructs the volute of the map. This is equivalent to <Code>Dual(Whirl(Dual(M)))</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Volute(Cube(3)));
[ [ 3, 4 ], [ 3, 6 ] ]
gap> SchlafliSymbol(Volute(Dual(Cube(3))));
[ 3, [ 4, 6 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="JoinKisKis" Label="for IsMapOnSurface"/>
 <Returns>joinkiskis
</Returns>
 <Description>
Constructs the join-kis-kis of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(JoinKisKis(Cube(3)));
[ [ 3, 4 ], [ 3, 8, 9 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="Cross" Label="for IsMapOnSurface"/>
 <Returns>cross
</Returns>
 <Description>
Constructs the cross of the map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Cross(Cube(3)));
[ [ 3, 4 ], [ 4, 6 ] ]
]]></Example>


</Section>


</Chapter>

