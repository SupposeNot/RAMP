<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Group_Constructors">
<Heading>Group Constructors</Heading>

<Section Label="Chapter_Group_Constructors_Section_Ggis">
<Heading>Ggis</Heading>

<ManSection Label="UniversalGgi">
<Heading>UniversalGgi</Heading>
  <Oper Arg="n" Name="UniversalGgi" Label="for IsInt"/>
  <Oper Arg="cox" Name="UniversalGgi" Label="for IsList"/>
 <Returns><Code>IsFpGroup</Code>
</Returns>
 <Description>
In the first form, returns the universal Coxeter Group of rank n.
 In the second form, returns the Coxeter Group with the given Coxeter diagram.
 The diagram is given as a list with the order of r0 r1, r0 r2, ..., r0 r_{n-1}, r_1 r_2, etc. 
 </Description>
</ManSection>


<Example><![CDATA[
gap> g := UniversalGgi(3);
<fp group of size infinity on the generators [ r0, r1, r2 ]>
gap> RelatorsOfFpGroup(g);
[ r0^2, r1^2, r2^2 ]
gap> q := UniversalGgi([3,3,3]);
<fp group on the generators [ r0, r1, r2 ]>
gap> RelatorsOfFpGroup(q);
[ r0^2, r1^2, r2^2, (r0*r1)^3, (r0*r2)^3, (r1*r2)^3 ]
]]></Example>


<ManSection Label="Ggi">
<Heading>Ggi</Heading>
  <Oper Arg="cox[, relations]" Name="Ggi" Label="for IsList, IsList"/>
  <Oper Arg="cox, words, orders" Name="Ggi" Label="for IsList, IsList, IsList"/>
 <Returns><Code>IsFpGroup</Code>
</Returns>
 <Description>
Returns the ggi defined by the given Coxeter
 diagram and with the given relations. The relations can be given
 by a list of Tietze words or as a string of relators or relations
 that involve r0 etc. If no relations are given, then returns
 the universal ggi with the given Coxeter diagram.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
<Example><![CDATA[
gap> g := Ggi([3,3,3], "(r0 r1 r2 r1)^3");;
gap> Size(g);
54
gap> n := 5;;
gap> Size(Ggi([3,3,3], "(r0 r1 r2 r1)^$n"));
150
]]></Example>


The second form takes the Coxeter diagram <A>cox</A>, a list
 of <A>words</A> in the generators r0 etc, and a list of <A>orders</A>.
 It returns the ggi that is the quotient of the universal
 ggi with that Coxeter diagram by the relations obtained by setting each
 <A>word[i]</A> to have order <A>order[i]</A>. This is primarily useful for
 quickly constructing a family of related Ggis.
 </Description>
</ManSection>


<Example><![CDATA[
gap> L := List([1..5], k -> Ggi([3,3,3], ["r0 r1 r2 r1"], [k]));;
gap> List(L, Size);
[ 6, 24, 54, 96, 150 ]
]]></Example>


<ManSection>
  <Oper Arg="cox[, relations]" Name="CyclicGgi" Label="for IsList, IsList"/>
 <Returns><Code>IsFpGroup</Code>
</Returns>
 <Description>
Returns the ggi with a cyclic diagram defined by the given orders,
 and subject to the given relations.
 <A>cox</A> gives the orders of r0 r1, r1 r2, ..., r_{n-1} r_0.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g := CyclicGgi([3,4,5,6]);
<fp group on the generators [ r0, r1, r2, r3 ]>
gap> RelatorsOfFpGroup(g);
[ r0^2, r1^2, r2^2, r3^2, (r0*r1)^3, (r0*r2)^2, (r0*r3)^6, (r1*r2)^4, (r1*r3)^2, (r2*r3)^5 ]
gap> g2 := CyclicGgi([3,4,3,4], "(r0 r1 r2 r3)^4");
<fp group on the generators [ r0, r1, r2, r3 ]>
gap> Size(g2);
1440
]]></Example>


<ManSection>
  <Oper Arg="g, str" Name="GgiElement" Label="for IsGroup, IsString"/>
 <Returns>the element of <A>g</A> with underlying word <A>str</A>.
</Returns>
 <Description>
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
<Example><![CDATA[
gap> gap> g := Group((1,2), (2,3), (3,4), (1,4));;
gap> GgiElement(g, "r0 r3");
(1,2,4)
]]></Example>


 </Description>
</ManSection>


<ManSection>
  <Oper Arg="g, str" Name="SimplifiedGgiElement" Label="for IsGroup, IsString"/>
 <Returns>the element of <A>g</A> with underlying word <A>str</A>, in a reduced form.
</Returns>
 <Description>
This acts like GgiElement, except that the word is in reduced form.
 Note that this is accomplished by calling SetReducedMultiplication on g. As a result,
 further computations with g may be substantially slower.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
 </Description>
</ManSection>


<Example><![CDATA[
gap> g := Ggi([3,3,3], "(r0 r1 r2 r1)^4");;
gap> SimplifiedGgiElement(g, "(r0 r1)^4");
r0*r1
]]></Example>


</Section>


<Section Label="Chapter_Group_Constructors_Section_Sggis">
<Heading>Sggis</Heading>

<ManSection Label="UniversalSggi">
<Heading>UniversalSggi</Heading>
  <Oper Arg="n" Name="UniversalSggi" Label="for IsInt"/>
  <Oper Arg="sym" Name="UniversalSggi" Label="for IsList"/>
 <Returns><Code>IsFpGroup</Code>
</Returns>
 <Description>
In the first form, returns the universal Coxeter Group of rank n.
 In the second form, returns the Coxeter Group with Schlafli symbol sym.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g:=UniversalSggi(3);
<fp group of size infinity on the generators [ r0, r1, r2 ]>
gap> q:=UniversalSggi([3,4]);
<fp group of size 48 on the generators [ r0, r1, r2 ]>
gap> IsQuotient(g,q);
true
]]></Example>


<ManSection Label="Sggi">
<Heading>Sggi</Heading>
  <Oper Arg="symbol[, relations]" Name="Sggi" Label="for IsList, IsList"/>
  <Oper Arg="sym, words, orders" Name="Sggi" Label="for IsList, IsList, IsList"/>
 <Returns><Code>IsFpGroup</Code>
</Returns>
 <Description>
Returns the sggi defined by the given Schlafli
 symbol and with the given relations. The relations can be given
 by a list of Tietze words or as a string of relators or relations
 that involve r0 etc. If no relations are given, then returns
 the universal sggi with the given Schlafli symbol.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
<Example><![CDATA[
gap> g := Sggi([4,3,4], "(r0 r1 r2)^3, (r1 r2 r3)^3");;
gap> h := Sggi([4,4], "r0 = r2");;
gap> k := Sggi([infinity, infinity], [[1,2,1,2,1,2], [2,3,2,3,2,3]]);;
gap> k = Sggi([3,3]);
true
gap> n := 3;;
gap> Size(Sggi([4,4], "(r0 r1 r2 r1)^$n"));
72
]]></Example>


The second form takes the Schlafli Symbol <A>sym</A>, a list
 of <A>words</A> in the generators r0 etc, and a list of <A>orders</A>.
 It returns the Sggi that is the quotient of the universal
 Sggi with that Schlalfi Symbol by the relations obtained by setting each
 <A>word[i]</A> to have order <A>order[i]</A>. This is primarily useful for
 quickly constructing a family of related Sggis.
 </Description>
</ManSection>


<Example><![CDATA[
gap> L := List([1..5], k -> Sggi([4,4], ["r0 r1 r2"], [2*k]));;
gap> List(L, Size);
[ 16, 64, 144, 256, 400 ]
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsGgi" Label="for IsGroup"/>
 <Returns>whether <A>g</A> is generated by involutions.  Or more specifically, whether GeneratorsOfGroup(<A>g</A>) all have
  order 2 or less.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsGgi(SymmetricGroup(4));
false
gap> IsGgi(Group([(1,2),(2,3)]));
true
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsStringy" Label="for IsGroup"/>
 <Returns>whether every pair of non-adjacent generators of <A>g</A> commute.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsStringy(Group((1,2),(2,3),(3,4)));
true
gap> IsStringy(Group((1,2),(3,4),(2,3)));
false
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsSggi" Label="for IsGroup"/>
 <Returns>whether <A>g</A> is a string group generated by involutions.  Equivalent to <Code>IsGgi(g) and IsStringy(g)</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsSggi(SymmetricGroup(4));
false
gap> IsSggi(Group((1,2),(3,4),(2,3)));
false
gap> IsSggi(Group((1,2),(2,3),(3,4)));
true
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsFixedPointFreeSggi" Label="for IsGroup"/>
 <Returns>whether <A>g</A> is a string group generated by involutions such  that no generator and no product of two generators has any fixed points.
  A premaniplex M is a maniplex if and only if IsFixedPointFreeSggi(ConnectionGroup(M)).
  Equivalent to <Code>IsGgi(g) and IsStringy(g)</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFixedPointFreeSggi(Group((1,2)(3,4), (1,3)(2,4) ,(1,4)(2,3)));
true
gap> IsFixedPointFreeSggi(Group((1,2)(3,4), (1,2)(3,4), (1,4)(2,3)));
false
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsStringRotationGroup" Label="for IsGroup"/>
 <Returns>Whether <A>g</A> is a string rotation group, i.e. the even word subgroup  of an Sggi. This means that the product of adjacent generators should be an involution.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsStringRotationGroup(Group((1,2)(3,4), (2,3,4)));
false
gap> IsStringRotationGroup(Group((1,3,2), (2,4,3)));
true
]]></Example>


<ManSection>
  <Prop Arg="G" Name="IsStringC" Label="for IsGroup"/>
 <Returns>Whether <A>G</A> is a string C group. Currently only works for finite groups.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsStringC(Sggi([4,4], "r0 r1 r2"));
false
gap> IsStringC(Sggi([4,4], "(r0 r1 r2)^4"));
true
]]></Example>


<ManSection>
  <Prop Arg="G" Name="IsStringCPlus" Label="for IsGroup"/>
 <Returns>Whether <A>G</A> is a string C+ group. Currently only works for finite groups.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsStringCPlus(Group((1,2)(3,4), (2,3,4)));
false
gap> IsStringCPlus(Group((1,3,2), (2,4,3)));
true
gap> IsStringCPlus(RotationGroup(ToroidalMap44([1,0])));
false
]]></Example>


<ManSection>
  <Oper Arg="g, str" Name="SggiElement" Label="for IsGroup, IsString"/>
 <Returns>the element of <A>g</A> with underlying word <A>str</A>.
</Returns>
 <Description>
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
<Example><![CDATA[
gap> g := Group((1,2),(2,3),(3,4));;
gap> SggiElement(g, "r0 r1");
(1,3,2)
gap> n := 2;;
gap> SggiElement(g, "(r0 r1)^$n");
(1,2,3)
]]></Example>


 For convenience, you can also use a reflexible maniplex M in place
 of g, in which case <Code>AutomorphismGroup(M)</Code> is used for g.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="g, str" Name="SimplifiedSggiElement" Label="for IsGroup, IsString"/>
 <Returns>the element of <A>g</A> with underlying word <A>str</A>, in a reduced form.
</Returns>
 <Description>
This acts like SggiElement, except that the word is in reduced form.
 Note that this is accomplished by calling SetReducedMultiplication on g. As a result,
 further computations with g may be substantially slower.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
 For convenience, you can also use a reflexible maniplex M in place
 of g, in which case <Code>AutomorphismGroup(M)</Code> is used for g.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g := AutomorphismGroup(Cube(3));;
gap> SimplifiedSggiElement(g, "(r0 r1)^5");
r0*r1
]]></Example>


<ManSection>
  <Oper Arg="M, rel" Name="IsRelationOfReflexibleManiplex" Label="for IsManiplex, IsString"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the relation given by the string <A>rel</A> holds
 in <Code>AutomorphismGroup(M)</Code>.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := ReflexibleManiplex([8,6],"(r0 r1)^4 (r1 r2)^3");;
gap> IsRelationOfReflexibleManiplex(M, "(r0 r1 r2)^3");
false
gap> IsRelationOfReflexibleManiplex(M, "(r0 r1 r2)^12");
true
]]></Example>


<ManSection>
  <Oper Arg="g, str" Name="RotGpElement" Label="for IsGroup, IsString"/>
 <Returns>the element of the rotation group <A>g</A> with underlying word <A>str</A>.
</Returns>
 <Description>
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
<Example><![CDATA[
gap> Order(RotGpElement(Cube(3), "s1"));
4
gap> Order(RotGpElement(ToroidalMap44([1,2]), "s2^-1 s1"));
5
]]></Example>


 For convenience, you can also use a rotary maniplex M in place
 of g, in which case <Code>RotationGroup(M)</Code> is used for g.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="g, str" Name="SimplifiedRotGpElement" Label="for IsGroup, IsString"/>
 <Returns>the element of the rotation group <A>g</A> with underlying word <A>str</A>, in a reduced form.
</Returns>
 <Description>
This acts like RotGpElement, except that the word is in reduced form.
 Note that this is accomplished by calling SetReducedMultiplication on g. As a result,
 further computations with g may be substantially slower.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
 For convenience, you can also use a rotary maniplex M in place
 of g, in which case <Code>RotationGroup(M)</Code> is used for g.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SimplifiedRotGpElement(ToroidalMap44([1,2]), "s1^6");
s1^2
]]></Example>


<ManSection>
  <Oper Arg="parent, words" Name="SggiFamily" Label="for IsGroup, IsList"/>
 <Description>
Given a <A>parent</A> group and a list of strings that
 represent words in r0, r1, etc, returns a function. That function
 accepts a list of positive integers L, and returns the quotient of
 <A>parent</A> by the relations that set the order of each <A>words[i]</A>
 to L[i].
<Example><![CDATA[
gap> f := SggiFamily(Sggi([4,4]), ["r0 r1 r2 r1"]);
function( orders ) ... end
gap> g := f([3]);
<fp group on the generators [ r0, r1, r2 ]>
gap> Size(g);
72
gap> h := f([6]);
<fp group on the generators [ r0, r1, r2 ]>
gap> IsQuotient(h,g);
true
]]></Example>


 One of the advantages of building an SggiFamily is that testing whether
 one member of the family is a quotient of another member can be
 done quite quickly.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="m" Name="IsCConnected" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether a given maniplex is C-connected (i.e., is the connection group a string C-group).
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsCConnected(ToroidalMap44([1,0]));
false
gap> IsCConnected(Prism(ToroidalMap44([1,0])));
true
]]></Example>


<ManSection>
  <Oper Arg="g, I" Name="SectionSubgroup" Label="for IsGroup, IsList"/>
 <Returns>IsSggi
</Returns>
 <Description>
Given an Sggi <A>g</A>, returns the subgroup generated by those generators
 with indices in <A>I</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g := AutomorphismGroup(Cube(5));;
gap> SectionSubgroup(g, [0, 2, 3]);
Group([ r0, r2, r3 ])
gap> Size(last);
12
]]></Example>


<ManSection>
  <Oper Arg="g" Name="VertexFigureSubgroup" Label="for IsGroup"/>
 <Returns>IsSggi
</Returns>
 <Description>
Given an Sggi <A>g</A>, returns the vertex-figure subgroup; that is, the subgroup
 generated by all generators except for the first one.
 </Description>
</ManSection>


<Example><![CDATA[
gap> VertexFigureSubgroup(AutomorphismGroup(Cube(3)));
Group([ r1, r2 ])
gap> Size(last);
6
]]></Example>


<ManSection>
  <Oper Arg="g" Name="FacetSubgroup" Label="for IsGroup"/>
 <Returns>IsSggi
</Returns>
 <Description>
Given an Sggi <A>g</A>, returns the facet subgroup; that is, the subgroup
 generated by all generators except for the last one.
 </Description>
</ManSection>


<Example><![CDATA[
gap> FacetSubgroup(AutomorphismGroup(Cube(3)));
Group([ r0, r1 ])
gap> Size(last);
8
]]></Example>


</Section>


<Section Label="Chapter_Group_Constructors_Section_String_rotation_groups">
<Heading>String rotation groups</Heading>

<ManSection>
  <Oper Arg="n" Name="UniversalRotationGroup" Label="for IsInt"/>
 <Description>
 Returns the rotation subgroup of the universal Coxeter Group of rank n.
 </Description>
</ManSection>


<Example><![CDATA[
gap> UniversalRotationGroup(3);
<fp group of size infinity on the generators [ s1, s2 ]>
]]></Example>


<ManSection>
  <Oper Arg="sym" Name="UniversalRotationGroup" Label="for IsList"/>
 <Description>
 Returns the rotation subgroup of the Coxeter Group with Schlafli symbol sym.
 </Description>
</ManSection>


<Example><![CDATA[
gap> UniversalRotationGroup([4,4]);
<fp group of size infinity on the generators [ s1, s2 ]>
gap> UniversalRotationGroup([3,3,3]);
<fp group of size 60 on the generators [ s1, s2, s3 ]>
]]></Example>


</Section>


</Chapter>

