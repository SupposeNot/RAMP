  
  [1X9 [33X[0;0YPosets[133X[101X
  
  [33X[0;0YI'm  in  the process of reconciling all of this, but there are going to be a
  number of ways to [13Xdefine[113X a poset:[133X
  
  [30X    [33X[0;6YAs  an  [13XIsPosetOfFlags[113X, where the underlying description is an ordered
        list  of length [23Xn+2[123X. Each of the [23Xn+2[123X list elements is a list of faces,
        and the assumption is that these are the faces of rank [23Xi-2[123X, where [23Xi[123X is
        the  index  in the master list (e.g., [13Xl[1][1][113X would usually correspond
        to the unique [23X-1[123X face of a polytope -- and there won't be an [13Xl[1][2][113X).
        Each face is then a list of the flags incident with that face.[133X
  
  [30X    [33X[0;6YAs  an  [13XIsPosetOfIndices[113X, where the underlying description is a binary
        relation  on  a  set  of  indices,  which correspond to labels for the
        elements of the poset.[133X
  
  [30X    [33X[0;6YIf the poset is known to be atomic, then by a description of the faces
        in  terms  of  the  atoms...  usually  we'll just need the list of the
        elements  of  maximal  rank,  from  which  all  other  elements may be
        obtained.[133X
  
  [30X    [33X[0;6YAs  an [13XIsPosetOfElements[113X, where the elements could be anything, and we
        have a known function determining the partial order on the elements.[133X
  
  [33X[0;0YUsually, we assume that the poset will have a natural rank function on it.[133X
  
  
  [1X9.1 [33X[0;0YPoset constructors[133X[101X
  
  [1X9.1-1 PosetFromFaceListOfFlags[101X
  
  [33X[1;0Y[29X[2XPosetFromFaceListOfFlags[102X( [3Xlist[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsPosetOfFlags[113X.  Note  that the function is INTENTIONALLY agnostic
            about whether it is being given full poset or not.[133X
  
  [33X[0;0YGiven  a  [3Xlist[103X  of  lists  of  faces  in increasing rank, where each face is
  described  by  the  incident  flags, gives you a IsPosetOfFlags object back.
  Note  that  if  you don't include faces or ranks, this function doesn't know
  about about them![133X
  
  [33X[0;0YHere we have a poset using the [13XIsPosetOfFlags[113X description for the triangle.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xposet:=PosetFromFaceListOfFlags([[[]],[[1,2],[3,6],[4,5]],[[1,4],[2,3],[5,6]],[[1,2,3,4,5,6]]]);[127X[104X
    [4X[28XA poset using the IsPosetOfFlags representation with 8 faces.[128X[104X
    [4X[25Xgap>[125X [27XFaceListOfPoset(poset);[127X[104X
    [4X[28X[ [ [  ] ], [ [ 1, 2 ], [ 3, 6 ], [ 4, 5 ] ], [ [ 1, 4 ], [ 2, 3 ], [ 5, 6 ] ], [ [ 1, 2, 3, 4, 5, 6 ] ] ][128X[104X
  [4X[32X[104X
  
  [1X9.1-2 PosetOfConnectionGroup[101X
  
  [33X[1;0Y[29X[2XPosetOfConnectionGroup[102X( [3Xg[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsPosetOfFlags[113X with [13XIsFull[113X=true.[133X
  
  [33X[0;0YGiven  a group, returns a poset with an internal representation as a list of
  faces ordered by rank, where each face is represented as a list of the flags
  it  contains.  Note that this function includes the minimal (empty) face and
  the  maximal  face  of the maniplex. Note that the [23Xi[123X-faces correspond to the
  [23Xi+1[123X item in the list because of how GAP indexes lists.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=Group([(1,4)(2,3)(5,6),(1,2)(3,6)(4,5)]);[127X[104X
    [4X[28XGroup([ (1,4)(2,3)(5,6), (1,2)(3,6)(4,5) ])[128X[104X
    [4X[25Xgap>[125X [27XPosetOfConnectionGroup(g);[127X[104X
    [4X[28XA poset using the IsPosetOfFlags representation with 8 faces.[128X[104X
  [4X[32X[104X
  
  [1X9.1-3 PosetOfManiplex[101X
  
  [33X[1;0Y[29X[2XPosetOfManiplex[102X( [3Xmani[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsPosetOfFlags[113X[133X
  
  [33X[0;0YGiven  a  maniplex,  returns  a  poset  of  the  maniplex  with  an internal
  representation  as  a  list  of  faces  ordered  by rank, where each face is
  represented as a list of the flags it contains. Note that this function does
  include  the minimal (empty) face and the maximal face of the maniplex. Note
  that  the  [23Xi[123X-faces correspond to the [23Xi+1[123X item in the list because of how GAP
  indexes lists.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xp:=HemiCube(3);[127X[104X
    [4X[28XRegular 3-polytope of type [ 4, 3 ] with 24 flags[128X[104X
    [4X[25Xgap>[125X [27XPosetOfManiplex(p);[127X[104X
    [4X[28XA poset using the IsPosetOfFlags representation with 15 faces.[128X[104X
  [4X[32X[104X
  
  [1X9.1-4 PosetFromPartialOrder[101X
  
  [33X[1;0Y[29X[2XPosetFromPartialOrder[102X( [3XpartialOrder[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsPosetOfIndices[113X[133X
  
  [33X[0;0YGiven a partial order on a finite set of size [23Xn[123X, this function will create a
  partial order on [13X[1..n][113X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xl:=List([[1,1],[1,2],[1,3],[1,4],[2,4],[2,2],[3,3],[4,4]],x->Tuple(x));[127X[104X
    [4X[25Xgap>[125X [27Xr:=BinaryRelationByElements(Domain([1..4]), l);[127X[104X
    [4X[28X<general mapping: Domain([ 1 .. 4 ]) -> Domain([ 1 .. 4 ]) >[128X[104X
    [4X[25Xgap>[125X [27Xposet:=PosetFromPartialOrder(r);[127X[104X
    [4X[28XA poset using the IsPosetOfIndices representation [128X[104X
    [4X[25Xgap>[125X [27Xh:=HasseDiagramBinaryRelation(PartialOrder(poset));[127X[104X
    [4X[28X<general mapping: Domain([ 1 .. 4 ]) -> Domain([ 1 .. 4 ]) >[128X[104X
    [4X[25Xgap>[125X [27XUnderlyingRelation(h);[127X[104X
    [4X[28XDomain([ DirectProductElement( [ 1, 2 ] ), DirectProductElement( [ 1, 3 ] ), DirectProductElement( [ 2, 4 ] ) ])[128X[104X
  [4X[32X[104X
  
  [33X[0;0YNote  that what we've accomplished here is the poset containing the elements
  1,  2,  3,  4  with  partial  order  determined by whether the first element
  divides  the  second.  The  essential  information  about  the  poset can be
  obtained from the Hasse diagram.[133X
  
  [1X9.1-5 PosetFromElements[101X
  
  [33X[1;0Y[29X[2XPosetFromElements[102X( [3Xlist_of_faces[103X, [3X{func}[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsPosetOfElements[113X[133X
  
  [33X[0;0YThis  is  for gathering elements with a known ordering [3Xfunc[103X on two variables
  into  a poset. Note... you should expect to get complete garbage if you send
  it  a list of faces of different types. If your list of faces HasFlagList or
  HasAtomList,  you  may omit the function. Also note, the expectation is that
  [3Xfunc[103X  behaves  similarly  to IsSubset, i.e., [3Xfunc[103X (x,y)=true means [23Xy[123X is less
  than  [23Xx[123X in the order. Also worth noting, is that the internal representation
  of  this  kind  of  poset  can  and  does keep both the partial order on the
  indices,  and  the  list  of  faces  corresponding to those indices, and the
  binary  relation [3Xfunc[103X (if the [3Xlist_of_faces[103X elements all have HasFlagList or
  HasAtomList,   this   will   be   the   operation   [13XPairCompareFlagsList[113X  or
  [13XPairCompareAtomsList[113X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=SymmetricGroup(3);[127X[104X
    [4X[28XSym( [ 1 .. 3 ] )[128X[104X
    [4X[25Xgap>[125X [27Xasg:=AllSubgroups(g);[127X[104X
    [4X[28X[ Group(()), Group([ (2,3) ]), Group([ (1,2) ]), Group([ (1,3) ]), Group([ (1,2,3) ]), Group([ (1,2,3), (2,3) ]) ][128X[104X
    [4X[25Xgap>[125X [27Xposet:=PosetFromElements(asg,IsSubgroup);[127X[104X
    [4X[28XA poset using the IsPosetOfIndices representation [128X[104X
    [4X[25Xgap>[125X [27XHasseDiagramBinaryRelation(PartialOrder(poset));[127X[104X
    [4X[28X<general mapping: Domain([ 1 .. 6 ]) -> Domain([ 1 .. 6 ]) >[128X[104X
    [4X[25Xgap>[125X [27XUnderlyingRelation(last);[127X[104X
    [4X[28XDomain([ DirectProductElement( [ 1, 2 ] ), DirectProductElement( [ 1, 3 ] ), DirectProductElement( [ 1, 4 ] ),   DirectProductElement( [ 1, 5 ] ), DirectProductElement( [ 2, 6 ] ), DirectProductElement( [ 3, 6 ] ),   DirectProductElement( [ 4, 6 ] ), DirectProductElement( [ 5, 6 ] ) ])[128X[104X
    [4X[25Xgap>[125X [27XElementsList(poset){[2,6]};[127X[104X
    [4X[28X[ Group([ (2,3) ]), Group([ (1,2,3), (2,3) ]) ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YHere  we  have  an  example of how we can store a partially ordered set, and
  recover information about which objects are incident in the partial order.[133X
  
  [1X9.1-6 PairCompareFlagsList[101X
  
  [33X[1;0Y[29X[2XPairCompareFlagsList[102X( [3Xlist1[103X, [3Xlist2[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YFunction  assumes  [3Xlist1[103X  and  [3Xlist2[103X  are  of the form [[13XlistOfFlags[113X,[13Xi[113X] where
  [13XlistOfFlags[113X is a list of flags in the face and [13Xi[113X is the rank of the face.[133X
  
  [1X9.1-7 PairCompareAtomsList[101X
  
  [33X[1;0Y[29X[2XPairCompareAtomsList[102X( [3Xlist1[103X, [3Xlist2[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YFunction  assumes  [3Xlist1[103X  and  [3Xlist2[103X are of the form [13X[listOfAtoms,int][113X where
  [13XlistOfAtoms[113X is a list of flags in the face and [13Xint[113X is the rank of the face.[133X
  
  
  [1X9.2 [33X[0;0YPoset attributes[133X[101X
  
  [1X9.2-1 IsFlaggable[101X
  
  [33X[1;0Y[29X[2XIsFlaggable[102X( [3Xposet[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YChecks  or  creates  the  value of the attribute IsFlaggable for an IsPoset.
  Point  here  is  to  see  if  the  structure  of  the poset is sufficient to
  determine  the  flag graph. For IsPosetOfFlags this is another way of saying
  that  the  intersection  of  the  faces (thought of as collections of flags)
  containing   a   flag  is  that  selfsame  flag.  (Might  be  equivalent  to
  prepolytopal... but Gabe was tired and Gordon hasn't bothered to think about
  it yet.)[133X
  
  [1X9.2-2 IsAtomic[101X
  
  [33X[1;0Y[29X[2XIsAtomic[102X( [3Xposet[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YChecks  if  [3Xposet[103X is atomic. [13XNote, currently something that is not computed,
  just declared.[113X[133X
  
  [1X9.2-3 PartialOrder[101X
  
  [33X[1;0Y[29X[2XPartialOrder[102X( [3Xposet[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Y[13Xpartial order[113X[133X
  
  [33X[0;0YHasPartialOrder  Checks  if  [3Xposet[103X  has  a  declared  partial  order (binary
  relation).  SetPartialOrder  assigns  a  partial  order  to the [3Xposet[103X. [13XNote,
  currently something that is not computed, just declared.[113X[133X
  
  [1X9.2-4 ListIsFullPoset[101X
  
  [33X[1;0Y[29X[2XListIsFullPoset[102X( [3Xlist[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YGiven  [3Xlist[103X,  a  poset as a list of faces ordered by rank, each face listing
  the  flags  on the face, this function will tell you if the poset is full or
  not.[133X
  
  [1X9.2-5 RankOfPoset[101X
  
  [33X[1;0Y[29X[2XRankOfPoset[102X( [3Xposet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xinteger[113X[133X
  
  [33X[0;0YGiven  a  [3Xposet[103X,  returns  the  rank of the poset. Note: There may be hidden
  assumptions here to untangle later. NOT IMPLEMENTED YET.[133X
  
  [1X9.2-6 IsNotFull[101X
  
  [33X[1;0Y[29X[2XIsNotFull[102X( [3Xposet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YLets  me  check  to see if a poset is NOT full. For use in certain filtering
  operations.[133X
  
  [1X9.2-7 IsP1[101X
  
  [33X[1;0Y[29X[2XIsP1[102X( [3Xposet[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YDetermines whether a poset has property P1 from ARP.[133X
  
  
  [1X9.3 [33X[0;0YWorking with posets[133X[101X
  
  [1X9.3-1 AreIncidentFlagFaces[101X
  
  [33X[1;0Y[29X[2XAreIncidentFlagFaces[102X( [3Xobject1[103X, [3Xobject2[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YGiven two faces, will tell you if they are incident. Currently only supports
  faces as list of their incident flags.[133X
  
  [1X9.3-2 FlagsAsListOfFacesFromPoset[101X
  
  [33X[1;0Y[29X[2XFlagsAsListOfFacesFromPoset[102X( [3Xposet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsList[113X[133X
  
  [33X[0;0YGiven a [3Xposet[103X, this will give you a version of the list of flags in terms of
  the  faces  described in the [3Xposet[103X. Note that the flag list does not include
  the empty face or the maximal face.[133X
  
  [1X9.3-3 AdjacentFlag[101X
  
  [33X[1;0Y[29X[2XAdjacentFlag[102X( [3Xposet[103X, [3Xflag[103X, [3Xi[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xflag(s)[113X[133X
  
  [33X[0;0YGiven  a  flag  (represented as chains of faces comprised of lists of flags)
  and  a  poset  and  a rank, this function will give you the [3Xi[103X-adjacent flag.
  Note  that  adjacencies  are  listed  from  ranks  0  to  one  less than the
  dimension. You can replace [3Xflag[103X with the integer corresponding to that flag.
  Appending  [13Xtrue[113X  to the arguments will give the position of the flag instead
  of its description from [13XFlagsAsListOfFacesFromPoset[113X.[133X
  
  [1X9.3-4 ConnectionGeneratorOfPoset[101X
  
  [33X[1;0Y[29X[2XConnectionGeneratorOfPoset[102X( [3Xposet[103X, [3Xi[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YA permutation on the flags.[133X
  
  [33X[0;0YGiven  a  [3Xposet[103X and an integer [23Xi[123X, this function will give you the associated
  permutation for the rank [23Xi[123X-connection.[133X
  
  [1X9.3-5 ConnectionGroupOfPoset[101X
  
  [33X[1;0Y[29X[2XConnectionGroupOfPoset[102X( [3Xposet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsPermGroup[113X[133X
  
  [33X[0;0YGiven  a  [3Xposet[103X corresponding to a maniplex, this function will give you the
  connection group.[133X
  
  [1X9.3-6 FacesOfPosetAsBinaryRelationOnFaces[101X
  
  [33X[1;0Y[29X[2XFacesOfPosetAsBinaryRelationOnFaces[102X( [3Xposet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YA  binary  relation  on  the  integers 1 through [23Xn[123X, where [23Xn[123X is the
            number of faces of the full poset.[133X
  
  [33X[0;0YFacesOfPosetAsBinaryRelationOnFaces[133X
  
  [1X9.3-7 FaceListOfPoset[101X
  
  [33X[1;0Y[29X[2XFaceListOfPoset[102X( [3Xposet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xlist[113X[133X
  
  [33X[0;0YGives a list of faces collected into lists ordered by increasing rank.[133X
  
  
  [1X9.4 [33X[0;0YElements of posets, also known as faces.[133X[101X
  
  [1X9.4-1 RankPosetElement[101X
  
  [33X[1;0Y[29X[2XRankPosetElement[102X( [3Xposetelement[103X, [3X{face}[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0YThe rank of a poset element. Alternately [13XRankFace[113X([3XIsPosetElement[103X).[133X
  
  [1X9.4-2 FlagList[101X
  
  [33X[1;0Y[29X[2XFlagList[102X( [3Xposetelement[103X, [3X{face}[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Y[13Xlist[113X[133X
  
  [33X[0;0YDescription of [3Xposetelement[103X n as a list of incident flags (when present).[133X
  
  [1X9.4-3 FromPoset[101X
  
  [33X[1;0Y[29X[2XFromPoset[102X( [3Xposetelement[103X, [3X{face}[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Y[13Xposet[113X[133X
  
  [33X[0;0YGives the poset to which the face belongs (when present).[133X
  
  [1X9.4-4 AtomList[101X
  
  [33X[1;0Y[29X[2XAtomList[102X( [3Xposetelement[103X, [3X{face}[103X ) [32X attribute[133X
  [6XReturns:[106X  [33X[0;10Y[13Xlist[113X[133X
  
  [33X[0;0YDescription of [3Xposetelement[103X n as a list of atoms (when present).[133X
  
  [1X9.4-5 Index[101X
  
  [33X[1;0Y[29X[2XIndex[102X( [3Xarg[103X ) [32X attribute[133X
  
  [1X9.4-6 PosetElementFromListOfFlags[101X
  
  [33X[1;0Y[29X[2XPosetElementFromListOfFlags[102X( [3Xlist[103X, [3Xn[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsPosetElement[113X[133X
  
  [33X[0;0YThis is used to create a face of rank [3Xn[103X from a [3Xlist[103X of flags of poset. If an
  IsPoset  object is appended to the input will tell the element what poset it
  belongs to.[133X
  
  [1X9.4-7 PosetElementFromAtomList[101X
  
  [33X[1;0Y[29X[2XPosetElementFromAtomList[102X( [3Xlist[103X, [3Xn[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsFace[113X[133X
  
  [33X[0;0YCreates  a  [13Xface[113X  with  [3Xlist[103X  of  atoms  at  rank [3Xn[103X. If an IsPoset object is
  appended to the input will tell the element what poset it belongs to.[133X
  
  [1X9.4-8 PosetElementFromIndex[101X
  
  [33X[1;0Y[29X[2XPosetElementFromIndex[102X( [3Xobj[103X, [3Xn[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13XIsFace[113X[133X
  
  [33X[0;0YCreates a [13Xface[113X with index [3Xobj[103X at rank [3Xn[103X. If an IsPoset object is appended to
  will tell the element what poset it belongs to.[133X
  
  [1X9.4-9 RankedFaceListOfPoset[101X
  
  [33X[1;0Y[29X[2XRankedFaceListOfPoset[102X( [3Xposet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xlist[113X[133X
  
  [33X[0;0YGives a list of [[3Xface[103X,[3Xrank[103X] pairs for all the faces of [3Xposet[103X.[133X
  
  [1X9.4-10 IsSubface[101X
  
  [33X[1;0Y[29X[2XIsSubface[102X( [[3Xface1[103X, [3Xface1[103X] ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Y[13Xtrue[113X or [13Xfalse[113X[133X
  
  [33X[0;0Y[3Xface1[103X  and  [3Xface2[103X  are  IsFace or IsPosetElement. Subface will check to make
  sure [3Xface2[103X is a subface of [3Xface1[103X.[133X
  
