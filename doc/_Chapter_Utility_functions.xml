<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Utility_Functions">
<Heading>Utility Functions</Heading>

<Section Label="Chapter_Utility_Functions_Section_System">
<Heading>System</Heading>

<ManSection>
  <InfoClass Name="InfoRamp" />
 <Description>
The InfoClass for the Ramp package.
 This is sort of an "information channel" that functions can send updates to, and
 by default, users of Ramp will see these messages. To add such a message to a function
 that you are writing for Ramp, use <Code>Info(InfoRamp, 1, "This is a message!");</Code>. For example,
 if you have a function <Code>f</Code> with this line, then the user will see this:
<Example><![CDATA[
gap> f(3);;
#I This is a message!
]]></Example>


 To turn off messages from this class, use <Code>SetInfoLevel(InfoRamp, 0)</Code>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Utility_Functions_Section_Polytopes">
<Heading>Polytopes</Heading>

<ManSection>
  <Func Arg="args" Name="AbstractPolytope" />
 <Description>
Calls <Code>Maniplex(args)</Code> and verifies whether the output is polytopal.
 If not, this throws an error. Use <Code>AbstractPolytopeNC</Code> to assume that the output
 is polytopal and mark it as such.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AbstractPolytope(Group([ (1,2)(3,4)(5,6)(7,8)(9,10), (1,10)(2,3)(4,5)(6,7)(8,9) ]));
Pgon(5)
]]></Example>


<ManSection>
  <Func Arg="args" Name="AbstractRegularPolytope" />
 <Description>
Calls <Code>ReflexibleManiplex(args)</Code> and verifies whether the output is polytopal.
 If not, this throws an error. Use <Code>AbstractRegularPolytopeNC</Code> to assume that the output
 is polytopal and mark it as such.
 Also available as <Code>ARP(args)</Code> and <Code>ARPNC(args)</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Pgon(5)=AbstractRegularPolytope(Group([(2,3)(4,5),(1,2)(3,4)]));
true
]]></Example>


<ManSection>
  <Func Arg="args" Name="AbstractRotaryPolytope" />
 <Description>
Calls <Code>RotaryManiplex(args)</Code> and verifies whether the output is polytopal.
 If not, this throws an error. Use <Code>AbstractRotaryPolytopeNC</Code> to assume that the output
 is polytopal and mark it as such.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := AbstractRotaryPolytope(Group((1,2)(3,4), (1,4)(2,3)));
regular 3-polytope of type [ 2, 2 ] with 8 flags
gap> M := AbstractRotaryPolytope(Group((1,2,3,4), (1,2)));
Error, The given group is not a String Rotation Group...
]]></Example>


</Section>


<Section Label="Chapter_Utility_Functions_Section_Permutations">
<Heading>Permutations</Heading>

<ManSection>
  <Func Arg="perm, k" Name="TranslatePerm" />
 <Description>
 Returns a new permutation obtained from <A>perm</A> by adding k
 to each moved point.
 </Description>
</ManSection>


<Example><![CDATA[
gap> TranslatePerm((1,2,3,4),5);
(6,7,8,9)
]]></Example>


<ManSection>
  <Func Arg="perm, multiplier, offset" Name="MultPerm" />
 <Description>
Multiplies together perm, TranslatePerm(perm, offset), TranslatePerm(perm, offset*2),
 ..., with <A>multiplier</A> terms, and returns the result.
 </Description>
</ManSection>


<Example><![CDATA[
gap> MultPerm((1,2,3)(4,5,6),3,7);
(1,2,3)(4,5,6)(8,9,10)(11,12,13)(15,16,17)(18,19,20)
gap> MultPerm((1,2,3,4),2,4);
(1,2,3,4)(5,6,7,8)
]]></Example>


<ManSection>
  <Func Arg="list1, list2" Name="InvolutionListList" />
 <Returns>involution
</Returns>
 <Description>
Construction the involution (when possible) with entries <Code>(list1[i],list2[i])</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> InvolutionListList([3,4,5],[6,7,8]);
(3,6)(4,7)(5,8)
]]></Example>


<ManSection>
  <Oper Arg="perm1[, perm2], perm3" Name="PermFromRange" Label="for IsPerm, IsPerm, IsPerm"/>
 <Returns>Permutation
</Returns>
 <Description>
Given three permutations, where <A>perm2</A> and <A>perm3</A> are
 translations of <A>perm1</A>, forms the permutation that we would most likely denote
 by perm1 * perm2 * ... * perm3. Namely, if <A>perm2</A> is a translation of <A>perm1</A>
 by k, then we successively translate by k until we get <A>perm3</A>, and then we
 multiply those permutations together.
<P/>
 When only two permutations are given, then <A>perm2</A> is the smallest translation
 of perm1 such that <Code>SmallestMovedPoint(perm2) > LargestMovedPoint(perm1)</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> PermFromRange((1,2), (9,10));
(1,2)(3,4)(5,6)(7,8)(9,10)
gap> PermFromRange((1,3), (13,15));
(1,3)(4,6)(7,9)(10,12)(13,15)
gap> PermFromRange((2,3,4), (8,9,10));
(2,3,4)(5,6,7)(8,9,10)
gap> PermFromRange((1,2), (101,102), (601,602));
(1,2)(101,102)(201,202)(301,302)(401,402)(501,502)(601,602)
]]></Example>


</Section>


<Section Label="Chapter_Utility_Functions_Section_Words_on_relations">
<Heading>Words on relations</Heading>

<ManSection>
  <Func Arg="rels, g" Name="ParseGgiRels" />
 <Returns>a list of relators
</Returns>
 <Description>
This helper function is used in several maniplex constructors.
 Given a string <A>rels</A> that represents relations in an sggi, and an sggi g,
 returns a list of elements in the free group of g represented by <A>rels</A>.
 These can then be used to form a quotient of g.
<Example><![CDATA[
gap> g := AutomorphismGroup(CubicTiling(2));;
gap> rels := "(r0 r1 r2 r1)^6";;
gap> newrels := ParseGgiRels(rels, g);
[ (r0*r1*r2*r1)^6 ]
gap> newrels[1] in FreeGroupOfFpGroup(g);
true
gap> g2 := FactorGroupFpGroupByRels(g, newrels);
<fp group on the generators [ r0, r1, r2 ]>
]]></Example>


 For convenience, you may use z1, z2, etc and h1, h2, etc in relations,
 where zj means r0 (r1 r2)^j (the "j-zigzag" word) and hj means r0 (r1 r2)^j-1 r1
 (the "j-hole" word).
 </Description>
</ManSection>


<ManSection>
  <Func Arg="rels, g" Name="ParseRotGpRels" />
 <Description>
This helper function is used in several maniplex constructors.
 It is analogous to ParseGgiRels, but for rotation groups instead.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g := UniversalRotationGroup([4,4]);
<fp group of size infinity on the generators [ s1, s2 ]>
gap> rels := "(s1 s2^-1)^6";;
gap> newrels := ParseRotGpRels(rels, g);
[ (s1*s2^-1)^6 ]
gap> g2 := FactorGroupFpGroupByRels(g, newrels);
<fp group on the generators [ s1, s2 ]>
gap> M := RotaryManiplex(g2);
3-maniplex with 288 flags
gap> M = ToroidalMap44([6,0]);
true
]]></Example>


<ManSection>
  <Func Arg="g" Name="StandardizeSggi" />
 <Returns>IsSggi
</Returns>
 <Description>
Takes an sggi, and returns an isomorphic sggi that is a quotient of the universal
 sggi of the appropriate rank.
 </Description>
</ManSection>


<Example><![CDATA[
gap> f := FreeGroup("x","y","z");
<free group on the generators [ x, y, z ]>
gap> AssignGeneratorVariables(f);
#I  Assigned the global variables [ x, y, z ]
gap> g := f / [x^2, y^2, z^2, (x*z)^2, (x*y)^4, (y*z)^4, (x*y*z)^6];
<fp group on the generators [ x, y, z ]>
gap> IsSggi(g);
true
gap> g2 := StandardizeSggi(g);
<fp group on the generators [ r0, r1, r2 ]>
gap> ReflexibleManiplex(g) = ReflexibleManiplex(g2);
true
]]></Example>


<ManSection>
  <Func Arg="L, x" Name="AddOrAppend" />
 <Description>
Given a list <A>L</A> and an object <A>x</A>, this calls
 Append(L, x) if x is a list; otherwise it calls Add(L, x).
 Note that since strings are internally represented as lists,
 AddOrAppend(L, "foo") will append the characters 'f', 'o', 'o'.
<Example><![CDATA[
gap> L := [1, 2, 3];;
gap> AddOrAppend(L, 4);
gap> L;
[1, 2, 3, 4]
gap> AddOrAppend(L, [5, 6]);
gap> L;
[1, 2, 3, 4, 5, 6];
]]></Example>


 </Description>
</ManSection>


<ManSection>
  <Func Arg="posetOp" Name="WrappedPosetOperation" />
 <Description>
Given a poset operation, creates a bare-bones maniplex
 operation that delegates to the poset operation.
<Example><![CDATA[
gap> myjoin := WrappedPosetOperation(JoinProduct);
function( arg... ) ... end
gap> M := myjoin(Pgon(4), Vertex());
3-maniplex
gap> M = Pyramid(4);
true
]]></Example>


 Usually, you will want to eventually create a fuller-featured wrapper
 of the poset operation -- one that can infer more information from its
 arguments. But this method is a good way to quickly test whether a poset
 operation works on maniplexes the way one expects.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="M" Name="MarkAsPolytopal" Label="for IsManiplex"/>
 <Description>
Sets <Code>IsPolytopal(M)</Code> as true, and if necessary, changes
 <Code>String(M)</Code> to reflect this.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="G, N" Name="ReallyNaturalHomomorphismByNormalSubgroup" Label="for IsGroup,IsGroup"/>
 <Returns>quotient group with generators appropriately mapped
</Returns>
 <Description>
Image(NaturalHomomorphismByNormalSubgroup(G,N)) tries to make the quotient efficient in terms of the number of generators, which is disastrous for studying Sggis. This fixes that.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="G, S, act" Name="ActionByGenerators" />
 <Description>
Returns a permutation group that represents the action of <A>G</A> on <A>S</A> as given by the action <A>act</A>.
 Furthermore, the generators of this permutation group are the images of the generators of <A>G</A>.
<Example><![CDATA[
gap> g := Group([ (1,2)(3,4)(5,6)(7,8), (2,3)(6,7), (3,5)(4,6) ]);;
gap> ActionByGenerators(g, [[1,8],[2,7],[3,6],[4,5]], OnSets);
Group([ (1,2)(3,4), (2,3), (3,4) ])
]]></Example>


 </Description>
</ManSection>


<ManSection>
  <Func Arg="G, S, B" Name="ActionOnBlocks" />
 <Description>
Given a group <A>G</A> acting on a set <A>S</A> and an initial block <A>B</A>, returns the action of <A>G</A> on the
 block system induced by <A>B</A>. This is equivalent to <Code>ActionByGenerators(G, Blocks(G, S, B), OnSets)</Code>.
<Example><![CDATA[
gap> g := Group([ (1,2)(3,4)(5,6)(7,8), (2,3)(6,7), (3,5)(4,6) ]);;
gap> ActionOnBlocks(g, [1..8], [1,8]);
Group([ (1,2)(3,4), (2,3), (3,4) ])
]]></Example>


 </Description>
</ManSection>


<ManSection>
  <Func Arg="M" Name="VerifyProperties" />
 <Returns>Boolean
</Returns>
 <Description>
Given a maniplex <A>M</A>, recalculates all of the stored properties (boolean attributes) and some of the stored numeric attributes
 of <A>M</A>. Returns true if the recalculated values agree with the stored values. Otherwise, outputs a list of which values had
 discrepancies and then returns false.
<P/>
 Note that the way that we recalculate the properties is to build a new maniplex from ConnectionGroup(<A>M</A>). So if 
 this connection group is incorrect, then this method will not work as intended.
<Example><![CDATA[
gap> M := Maniplex(ConnectionGroup(Cube(3)));;
gap> SetNumberOfFlagOrbits(M, 3);
gap> VerifyProperties(M);
Value mismatch in NumberOfFlagOrbits: stored value is 3 and real value is 1
false
]]></Example>


 </Description>
</ManSection>


</Section>


</Chapter>

