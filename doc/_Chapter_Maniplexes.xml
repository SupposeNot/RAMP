<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Maniplexes">
<Heading>Maniplexes</Heading>


<Section Label="Chapter_Maniplexes_Section_Mixing_of_Maniplexes_functions">
<Heading>Mixing of Maniplexes functions</Heading>

<ManSection Label="Mix">
<Heading>Mix of groups</Heading>
  <Oper Arg="g, h" Name="Mix" Label="for IsPermGroup, IsPermGroup"/>
 <Returns><Code>IsGroup </Code>.
</Returns>
 <Description>
Given two groups (either both permutation groups or both FpGroups), returns the mix of those groups.
 If g and h are permutation groups of degree m and n, respectively, then the mix is a permutation group of degree
 m+n.
 </Description>
</ManSection>


 Here we build the mix of the connection groups of a 3-cube and an edge.
<Example><![CDATA[
gap> g1:=ConnectionGroup(Cube(3));
<permutation group with 3 generators>
gap> g2:=ConnectionGroup(Edge());
Group([ (1,2) ])
gap> Mix(g1,g2);
<permutation group with 3 generators>
]]></Example>


<ManSection>
  <Oper Arg="maniplex, maniplex" Name="Mix" Label="for IsPremaniplex, IsPremaniplex"/>
 <Returns><Code>IsReflexibleManiplex </Code>.
</Returns>
 <Description>
Given two (pre-)maniplexes, returns their mix. For two reflexible maniplexes returns the IsReflexibleManiplex from the mix of their connection groups. In general, it returns the "flag mix" of the two maniplexes (see <Code>FlagMix</Code>).
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="maniplex, maniplex" Name="FlagMix" Label="for IsPremaniplex, IsPremaniplex"/>
 <Returns><Code>IsManiplex </Code>.
</Returns>
 <Description>
Given two (pre-)maniplexes p, q this returns the (pre-)maniplex of their
 "flag" mix. That is, it constructs the mix of their connection groups, keeps
 the connected component with the base flags of p and q, and then builds a maniplex
 from this.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := ToroidalMap44([1,2]);;
gap> FlagMix(M,M) = M;
true
gap> R := FlagMix(M, EnantiomorphicForm(M));
3-maniplex with 200 flags
gap> IsReflexible(R);
true
gap> R = ToroidalMap44([5,0]);
true
]]></Example>


<ManSection Label="Comix">
<Heading>Comix</Heading>
  <Oper Arg="fpgroup, fpgroup" Name="Comix" Label="for IsFpGroup, IsFpGroup"/>
  <Oper Arg="maniplex, maniplex" Name="Comix" Label="for IsReflexibleManiplex, IsReflexibleManiplex"/>
 <Returns><Code>IsReflexibleManiplex </Code>.
</Returns>
 <Description>
 Returns the comix of two Finitely Presented groups gp and gq.
Given maniplexes returns the IsReflexibleManiplex from the comix of their connection groups
 </Description>
</ManSection>


<ManSection Label="Tools">
<Heading>Indexed array tools</Heading>
  <Oper Arg="int, int, int, int" Name="CtoL" Label="for IsInt,IsInt,IsInt,IsInt"/>
 <Returns><Code>IsInteger </Code>.
</Returns>
 <Description>
CtoL Returns an integer between 1 and N*M associated with the pair [a,b].
 LtoC Returns an ordered pair [a,b] associated with the integer between 1 and N*M.
 a should range between 1 and N, and b should range between 1 and M
 N is how many columns (x coordinates), M is how many rows (y coordinates) in a matrix
 Functions are inverses.
 </Description>
</ManSection>


<Example><![CDATA[
gap> LtoC(5,4,14);
[ 1, 2 ]
gap> CtoL(3,2,5,4);
8
gap> LtoC(8,5,4);
[ 3, 2 ]
]]></Example>


</Section>


<Section Label="Chapter_Maniplexes_Section_Subclasses_of_maniplex">
<Heading>Subclasses of maniplex</Heading>

<ManSection>
  <Prop Arg="M" Name="IsPolytopal" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
Returns whether the maniplex <A>M</A> is polytopal;
 i.e., the flag graph of a polytope.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="SatisfiesWeakPathIntersectionProperty" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Tests for the weak path intersection property in a maniplex. Definitions and description available in <Cite Key="GleHub18"/>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="m" Name="IsFaithful" Label="for IsManiplex"/>
 <Description>
Returns whether the maniplex <A>m</A> is
 faithful, as defined in "Polytopality of Maniplexes"; i.e., whether for each flag the intersection of all the i-faces containing that flag is just the flag itself.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFaithful(Cube(3));
true
gap> IsFaithful(ToroidalMap44([1,0]));
false
]]></Example>


<ManSection>
  <Attr Arg="maniplex" Name="IsRegularPolytope" Label="for IsManiplex"/>
 <Description>
Returns whether a maniplex is a regular polytope.
 </Description>
</ManSection>


<Example><![CDATA[
gap> p:=24Cell();
24Cell
gap> IsRegularPolytope(p);
true
gap> q:=CartesianProduct(Simplex(2),Cube(2));
CartesianProduct(Pgon(3), Pgon(4))
gap> IsRegularPolytope(q);
false
]]></Example>


</Section>


<Section Label="Chapter_Maniplexes_Section_Rotary_maniplexes_and_rotation_groups">
<Heading>Rotary maniplexes and rotation groups</Heading>

<ManSection>
  <Oper Arg="n" Name="UniversalRotationGroup" Label="for IsInt"/>
 <Description>
 Returns the rotation subgroup of the universal Coxeter Group of rank n.
 </Description>
</ManSection>


<Example><![CDATA[
gap> UniversalRotationGroup(3);
<fp group of size infinity on the generators [ s1, s2 ]>
]]></Example>


<ManSection>
  <Oper Arg="sym" Name="UniversalRotationGroup" Label="for IsList"/>
 <Description>
 Returns the rotation subgroup of the Coxeter Group with Schlafli symbol sym.
 </Description>
</ManSection>


<Example><![CDATA[
gap> UniversalRotationGroup([4,4]);
<fp group of size infinity on the generators [ s1, s2 ]>
gap> UniversalRotationGroup([3,3,3]);
<fp group of size 60 on the generators [ s1, s2, s3 ]>
]]></Example>


<ManSection Label="RotaryManiplex">
<Heading>RotaryManiplex</Heading>
  <Oper Arg="g" Name="RotaryManiplex" Label="for IsGroup"/>
  <Oper Arg="sym" Name="RotaryManiplex" Label="for IsList"/>
  <Oper Arg="sym, relations" Name="RotaryManiplex" Label="for IsList, IsList"/>
  <Oper Arg="sym, words, orders" Name="RotaryManiplex" Label="for IsList, IsList, IsList"/>
 <Description>
In the first form, given a group g (which should be a string rotation group),
 returns the rotary maniplex with that rotation group,
 where the privileged generators are those returned by GeneratorsOfGroup(g).
 This function first checks whether g is a StringRotationGroup. Use <Code>RotaryManiplexNC</Code> to
 bypass that check.
<Example><![CDATA[
gap> M := RotaryManiplex(UniversalRotationGroup([3,3]));;
gap> M = Simplex(3);
true
]]></Example>


<P/>
The second form returns the universal rotary maniplex (in fact, regular polytope)
 with Schlafli symbol <A>sym</A>.
<Example><![CDATA[
gap> M := RotaryManiplex([4,3]);;
gap> M = Cube(3);
true
]]></Example>


<P/>
The third form returns the rotary maniplex with the given Schlafli
 symbol and with the given relations.
 The relations are given by a string that refers to the generators
 s1, s2, etc. This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
<Example><![CDATA[
gap> M := RotaryManiplex([4,4], "(s2^-1 s1)^6");;
gap> M = ToroidalMap44([6,0]);
true
]]></Example>


<P/>
The fourth form takes the Schlafli Symbol <A>sym</A>, a list
 of <A>words</A> in the generators r0 etc, and a list of <A>orders</A>.
 It returns the rotary maniplex that is the quotient of the universal
 maniplex with that Schlalfi Symbol by the relations obtained by setting each
 <A>word[i]</A> to have order <A>order[i]</A>. This is primarily useful for
 quickly constructing a family of related maniplexes.
 </Description>
</ManSection>


<Example><![CDATA[
gap> L := List([1..5], k -> RotaryManiplex([4,4], ["s1 s2^-1"], [k]));;
gap> List(L, IsPolytopal);
[ false, true, true, true, true ]
]]></Example>


<P/>
 In the last two forms, if the option set_schlafli is set, then we set the Schlafli symbol
 to the one given. This may not be the correct Schlafli symbol, since
 the relations may cause a collapse, so this should only be used if
 you know that the Schlafli symbol is correct.
<Example><![CDATA[
gap> M := RotaryManiplex([6,6], "(s1^2 s2^2)^8");;
gap> SchlafliSymbol(M);
#I  Coset table calculation failed -- trying with bigger table limit
... eventually give up with CTRL-C
gap> M := RotaryManiplex([6,6], "(s1^2 s2^2)^8" : set_schlafli);;
gap> SchlafliSymbol(M);
[6, 6]
]]></Example>


<ManSection>
  <Oper Arg="M" Name="EnantiomorphicForm" Label="for IsManiplex"/>
 <Description>
The <Emph>enantiomorphic form</Emph> of a rotary maniplex is
 the same maniplex, but where we choose the new base flag to be
 one of the flags that is adjacent to the original base flag.
 If M is reflexible, then this choice has no effect.
 Otherwise, if M is chiral, then the enantiomorphic form
 gives us a different presentation for the rotation group.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := ToroidalMap44([1,2]);;
gap> g := AutomorphismGroup(M);
<fp group of size 20 on the generators [ s1, s2 ]>
gap> RelatorsOfFpGroup(g);
[ (s1*s2)^2, s1^4, s2^4, s2^-1*s1*(s2*s1^-1)^2 ]
gap> h := AutomorphismGroup(EnantiomorphicForm(M));
<fp group of size 20 on the generators [ s1, s2 ]>
gap> RelatorsOfFpGroup(h);
[ (s1*s2)^2, s1^4, s2^4, s2^-1*s1^-1*s2*s1^3*s2*s1 ]
]]></Example>


</Section>


</Chapter>

