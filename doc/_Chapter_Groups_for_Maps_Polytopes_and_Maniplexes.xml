<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Groups_for_Maps_Polytopes_and_Maniplexes">
<Heading>Groups for Maps, Polytopes, and Maniplexes</Heading>

<Section Label="Chapter_Groups_for_Maps_Polytopes_and_Maniplexes_Section_Groups_of_Maps_Polytopes_and_Maniplexes">
<Heading>Groups of Maps, Polytopes, and Maniplexes</Heading>

<ManSection Label="Automorphism_Group">
<Heading>Automorphism Groups</Heading>
  <Attr Arg="M" Name="AutomorphismGroup" Label="for IsPremaniplex"/>
  <Attr Arg="M" Name="AutomorphismGroupFpGroup" Label="for IsManiplex"/>
  <Attr Arg="M" Name="AutomorphismGroupPermGroup" Label="for IsManiplex"/>
  <Attr Arg="M" Name="AutomorphismGroupOnFlags" Label="for IsManiplex"/>
 <Description>
 Returns the automorphism group of <A>M</A>.
 This group is not guaranteed to be in any particular form. For particular permutation representations you should consider the various AutomorphismGroupOn... functions, or AutomorphismGroupFpGroup.
 Returns the automorphism group of <A>M</A> as a
 finitely presented group. If <A>M</A> is reflexible, then this is guaranteed to be the standard presentation.
 Returns the automorphism group of <A>M</A> as a
 permutation group. This group is not guaranteed to be in any particular form. For particular permutation representations you should consider the various AutomorphismGroupOn... functions.
 Returns the automorphism group of <A>M</A> as a
 permutation group action on the flags of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> s0 := (3,7)(4,8)(5,6);;
gap> s1 := (2,3)(4,6)(5,7);;
gap> s2 := (1,2)(3,6)(4,8)(5,7);;
gap> poly := Group([s0,s1,s2]);;
gap> p:=ARP(poly);
regular 3-polytope
gap> AutomorphismGroup(p);
Group([ (3,7)(4,8)(5,6), (2,3)(4,6)(5,7), (1,2)(3,6)(4,8)(5,7) ])
gap> AutomorphismGroupFpGroup(p);
<fp group on the generators [ r0, r1, r2 ]>
gap> AutomorphismGroupPermGroup(Cube(3));
Group([ (3,4), (2,3)(4,5), (1,2)(5,6) ])
gap> AutomorphismGroupOnFlags(Cube(3));
<permutation group with 3 generators>
gap> GeneratorsOfGroup(last);
[ (1,20)(2,13)(3,10)(4,34)(5,35)(6,7)(8,27)(9,28)(11,23)(12,24)(14,44)(15,45)(16,18)(17,19)(21,40)(22,41)(25,37)(26,38)(29,48)(30,32)(31,33)(36,47)(39,46)(42,43), 
  (1,11)(2,18)(3,4)(5,26)(6,41)(7,8)(9,33)(10,45)(12,15)(13,31)(14,25)(16,28)(17,27)(19,22)(20,38)(21,32)(23,35)(24,34)(29,39)(30,47)(36,43)(37,48)(40,42)(44,46), 
  (1,3)(2,7)(4,25)(5,28)(6,13)(8,32)(9,35)(10,20)(11,14)(12,17)(15,47)(16,40)(18,21)(19,24)(22,48)(23,44)(26,42)(27,30)(29,41)(31,39)(33,46)(34,37)(36,45)(38,43) ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ConnectionGroup" Label="for IsPremaniplex"/>
 <Description>
 Returns the connection group of the premaniplex <A>M</A> as a
 permutation group. We may eventually allow other types
 of connection groups.
 Synonym: MonodromyGroup
 </Description>
</ManSection>


<Example><![CDATA[
gap> ConnectionGroup(HemiCube(3));
Group([ (1,8)(2,7)(3,14)(4,13)(5,20)(6,19)(9,16)(10,15)(11,22)(12,21)(17,24)(18,23), (1,3)(2,5)
  (4,6)(7,9)(8,11)(10,12)(13,15)(14,17)(16,18)(19,21)(20,23)(22,24), (1,2)(3,4)(5,6)(7,8)(9,10)
  (11,12)(13,14)(15,16)(17,18)(19,20)(21,22)(23,24) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="EvenConnectionGroup" Label="for IsManiplex"/>
 <Description>
 Returns the even-word subgroup of the connection group of <A>M</A> as a
 permutation group. 
 </Description>
</ManSection>


<Example><![CDATA[
gap> EvenConnectionGroup(HemiCube(3));
Group([ (1,11,24,14)(2,9,18,20)(3,17,22,8)(4,15,12,19)(5,23,16,7)(6,21,10,13), (1,4,5)(2,6,3)
  (7,10,11)(8,12,9)(13,16,17)(14,18,15)(19,22,23)(20,24,21) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="RotationGroup" Label="for IsManiplex"/>
 <Description>
 Returns the rotation group of <A>M</A>.
 This group is not guaranteed to be in any particular form.
 </Description>
</ManSection>


<Example><![CDATA[
gap> RotationGroup(HemiCube(3));
Group([ r0*r1, r1*r2 ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="RotationGroupFpGroup" Label="for IsManiplex"/>
 <Description>
 Returns the rotation group of <A>M</A>, as a finitely presented group
 on the standard generators.
 </Description>
</ManSection>


<Example><![CDATA[
gap> RotationGroupFpGroup(ToroidalMap44([1,2]));
<fp group on the generators [ s1, s2 ]>
gap> RelatorsOfFpGroup(last);
[ (s1*s2)^2, s1^4, s2^4, s2^-1*s1*(s2*s1^-1)^2 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ChiralityGroup" Label="for IsRotaryManiplex"/>
 <Description>
 Returns the chirality group of the rotary maniplex <A>M</A>.
 This is the kernel of the group epimorphism from the
 rotation group of <A>M</A> to the rotation group of its maximal
 reflexible quotient. In particular, the chirality group
 is trivial if and only if <A>M</A> is reflexible.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := ToroidalMap44([1,2]);
ToroidalMap44([ 1, 2 ])
gap> G := ChiralityGroup(M);
Group([ s2^-1*s1^-1*s2*s1^3*s2*s1 ])
gap> Size(G);
5
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ExtraRelators" Label="for IsReflexibleManiplex"/>
 <Description>
 For a reflexible maniplex <A>M</A>, returns the relators
 needed to define its automorphism group as a quotient of
 the string Coxeter group given by its Schlafli symbol.
 Not particularly robust at the moment.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ExtraRelators(HemiCube(3));
[ (r0*r1*r2)^3 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ExtraRotRelators" Label="for IsRotaryManiplex"/>
 <Description>
 For a reflexible maniplex <A>M</A>, returns the relators
 needed to define its rotation group as a quotient of
 the rotation group of a string Coxeter group given by its Schlafli symbol.
 Not particularly robust at the moment.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ExtraRotRelators(HemiCube(3));
[ (F2^-1*F1^-1)^2, (F2*F1^2*F2^-1*F1^-1)^2 ]
]]></Example>


<ManSection>
  <Oper Arg="permgroup" Name="IsManiplexable" Label="for IsPermGroup"/>
 <Returns><Code>Boolean</Code>.
</Returns>
 <Description>
Given a permutation group, it asks if the generators could be the connection group of a maniplex.
 That is to say, are each of the generators and their products fixed point free.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Groups_for_Maps_Polytopes_and_Maniplexes_Section_Sggis">
<Heading>Sggis</Heading>

<ManSection Label="UniversalSggi">
<Heading>UniversalSggi</Heading>
  <Oper Arg="n" Name="UniversalSggi" Label="for IsInt"/>
  <Oper Arg="sym" Name="UniversalSggi" Label="for IsList"/>
 <Returns><Code>IsFpGroup</Code>
</Returns>
 <Description>
In the first form, returns the universal Coxeter Group of rank n.
 In the second form, returns the Coxeter Group with Schlafli symbol sym.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g:=UniversalSggi(3);
<fp group of size infinity on the generators [ r0, r1, r2 ]>
gap> q:=UniversalSggi([3,4]);
<fp group of size 48 on the generators [ r0, r1, r2 ]>
gap> IsQuotient(g,q);
true
]]></Example>


<ManSection Label="Sggi">
<Heading>Sggi</Heading>
  <Oper Arg="symbol[, relations]" Name="Sggi" Label="for IsList, IsList"/>
  <Oper Arg="sym, words, orders" Name="Sggi" Label="for IsList, IsList, IsList"/>
 <Returns><Code>IsFpGroup</Code>
</Returns>
 <Description>
Returns the sggi defined by the given Schlafli
 symbol and with the given relations. The relations can be given
 by a list of Tietze words or as a string of relators or relations
 that involve r0 etc. If no relations are given, then returns
 the universal sggi with the given Schlafli symbol.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
<Example><![CDATA[
gap> g := Sggi([4,3,4], "(r0 r1 r2)^3, (r1 r2 r3)^3");;
gap> h := Sggi([4,4], "r0 = r2");;
gap> k := Sggi([infinity, infinity], [[1,2,1,2,1,2], [2,3,2,3,2,3]]);;
gap> k = Sggi([3,3]);
true
gap> n := 3;;
gap> Size(Sggi([4,4], "(r0 r1 r2 r1)^$n"));
72
]]></Example>


The second form takes the Schlafli Symbol <A>sym</A>, a list
 of <A>words</A> in the generators r0 etc, and a list of <A>orders</A>.
 It returns the reflexible maniplex that is the quotient of the universal
 maniplex with that Schlalfi Symbol by the relations obtained by setting each
 <A>word[i]</A> to have order <A>order[i]</A>. This is primarily useful for
 quickly constructing a family of related Sggis.
 </Description>
</ManSection>


<Example><![CDATA[
gap> L := List([1..5], k -> Sggi([4,4], ["r0 r1 r2"], [2*k]));;
gap> List(L, Size);
[ 16, 64, 144, 256, 400 ]
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsGgi" Label="for IsGroup"/>
 <Returns>whether <A>g</A> is generated by involutions.  Or more specifically, whether GeneratorsOfGroup(<A>g</A>) all have
  order 2 or less.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsGgi(SymmetricGroup(4));
false
gap> IsGgi(Group([(1,2),(2,3)]));
true
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsStringy" Label="for IsGroup"/>
 <Returns>whether every pair of non-adjacent generators of <A>g</A> commute.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsStringy(Group((1,2),(2,3),(3,4)));
true
gap> IsStringy(Group((1,2),(3,4),(2,3)));
false
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsSggi" Label="for IsGroup"/>
 <Returns>whether <A>g</A> is a string group generated by involutions.  Equivalent to <Code>IsGgi(g) and IsStringy(g)</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsSggi(SymmetricGroup(4));
false
gap> IsSggi(Group((1,2),(3,4),(2,3)));
false
gap> IsSggi(Group((1,2),(2,3),(3,4)));
true
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsFixedPointFreeSggi" Label="for IsGroup"/>
 <Returns>whether <A>g</A> is a string group generated by involutions such  that no generator and no product of two generators has any fixed points.
  A premaniplex M is a maniplex if and only if IsFixedPointFreeSggi(ConnectionGroup(M)).
  Equivalent to <Code>IsGgi(g) and IsStringy(g)</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFixedPointFreeSggi(Group((1,2)(3,4), (1,3)(2,4) ,(1,4)(2,3)));
true
gap> IsFixedPointFreeSggi(Group((1,2)(3,4), (1,2)(3,4), (1,4)(2,3)));
false
]]></Example>


<ManSection>
  <Prop Arg="g" Name="IsStringRotationGroup" Label="for IsGroup"/>
 <Returns>Whether <A>g</A> is a string rotation group, i.e. the even word subgroup  of an Sggi. This means that the product of adjacent generators should be an involution.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsStringRotationGroup(Group((1,2)(3,4), (2,3,4)));
false
gap> IsStringRotationGroup(Group((1,3,2), (2,4,3)));
true
]]></Example>


<ManSection>
  <Prop Arg="G" Name="IsStringC" Label="for IsGroup"/>
 <Returns>Whether <A>G</A> is a string C group. Currently only works for finite groups.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsStringC(Sggi([4,4], "r0 r1 r2"));
false
gap> IsStringC(Sggi([4,4], "(r0 r1 r2)^4"));
true
]]></Example>


<ManSection>
  <Prop Arg="G" Name="IsStringCPlus" Label="for IsGroup"/>
 <Returns>Whether <A>G</A> is a string C+ group. Currently only works for finite groups.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsStringCPlus(Group((1,2)(3,4), (2,3,4)));
false
gap> IsStringCPlus(Group((1,3,2), (2,4,3)));
true
gap> IsStringCPlus(RotationGroup(ToroidalMap44([1,0])));
false
]]></Example>


<ManSection>
  <Oper Arg="g, str" Name="SggiElement" Label="for IsGroup, IsString"/>
 <Returns>the element of <A>g</A> with underlying word <A>str</A>.
</Returns>
 <Description>
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
<Example><![CDATA[
gap> g := Group((1,2),(2,3),(3,4));;
gap> SggiElement(g, "r0 r1");
(1,3,2)
gap> n := 2;;
gap> SggiElement(g, "(r0 r1)^$n");
(1,2,3)
]]></Example>


 For convenience, you can also use a reflexible maniplex M in place
 of g, in which case <Code>AutomorphismGroup(M)</Code> is used for g.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="g, str" Name="SimplifiedSggiElement" Label="for IsGroup, IsString"/>
 <Returns>the element of <A>g</A> with underlying word <A>str</A>, in a reduced form.
</Returns>
 <Description>
This acts like SggiElement, except that the word is in reduced form.
 Note that this is accomplished by calling SetReducedMultiplication on g. As a result,
 further computations with g may be substantially slower.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
 For convenience, you can also use a reflexible maniplex M in place
 of g, in which case <Code>AutomorphismGroup(M)</Code> is used for g.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g := AutomorphismGroup(Cube(3));;
gap> SimiplifiedSggiElement(g, "(r0 r1)^5");
r0*r1
]]></Example>


<ManSection>
  <Oper Arg="M, rel" Name="IsRelationOfReflexibleManiplex" Label="for IsManiplex, IsString"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the relation given by the string <A>rel</A> holds
 in <Code>AutomorphismGroup(M)</Code>.
 This method automatically calls <Code>InterpolatedString</Code> on the relations, so
 you may use &#36;variable in the relations, and it will be replaced with
 the value of <Code>variable</Code> (but for global variables only).
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := ReflexibleManiplex([8,6],"(r0 r1)^4 (r1 r2)^3");;
gap> IsRelationOfReflexibleManiplex(M, "(r0 r1 r2)^3");
false
gap> IsRelationOfReflexibleManiplex(M, "(r0 r1 r2)^12");
true
]]></Example>


<ManSection>
  <Oper Arg="parent, words" Name="SggiFamily" Label="for IsGroup, IsList"/>
 <Description>
Given a <A>parent</A> group and a list of strings that
 represent words in r0, r1, etc, returns a function. That function
 accepts a list of positive integers L, and returns the quotient of
 <A>parent</A> by the relations that set the order of each <A>words[i]</A>
 to L[i].
<Example><![CDATA[
gap> f := SggiFamily(Sggi([4,4]), ["r0 r1 r2 r1"]);
function( orders ) ... end
gap> g := f([3]);
<fp group on the generators [ r0, r1, r2 ]>
gap> Size(g);
72
gap> h := f([6]);
<fp group on the generators [ r0, r1, r2 ]>
gap> IsQuotient(h,g);
true
]]></Example>


 One of the advantages of building an SggiFamily is that testing whether
 one member of the family is a quotient of another member can be
 done quite quickly.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="m" Name="IsCConnected" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether a given maniplex is C-connected (i.e., is the connection group a string C-group).
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsCConnected(ToroidalMap44([1,0]));
false
gap> IsCConnected(Prism(ToroidalMap44([1,0])));
true
]]></Example>


<ManSection>
  <Oper Arg="g, I" Name="SectionSubgroup" Label="for IsGroup, IsList"/>
 <Returns>IsSggi
</Returns>
 <Description>
Given an Sggi <A>g</A>, returns the subgroup generated by those generators
 with indices in <A>I</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g := AutomorphismGroup(Cube(5));;
gap> SectionSubgroup(g, [0, 2, 3]);
Group([ r0, r2, r3 ])
gap> Size(last);
12
]]></Example>


<ManSection>
  <Oper Arg="g" Name="VertexFigureSubgroup" Label="for IsGroup"/>
 <Returns>IsSggi
</Returns>
 <Description>
Given an Sggi <A>g</A>, returns the vertex-figure subgroup; that is, the subgroup
 generated by all generators except for the first one.
 </Description>
</ManSection>


<Example><![CDATA[
gap> VertexFigureSubgroup(AutomorphismGroup(Cube(3)));
Group([ r1, r2 ])
gap> Size(last);
6
]]></Example>


<ManSection>
  <Oper Arg="g" Name="FacetSubgroup" Label="for IsGroup"/>
 <Returns>IsSggi
</Returns>
 <Description>
Given an Sggi <A>g</A>, returns the facet subgroup; that is, the subgroup
 generated by all generators except for the last one.
 </Description>
</ManSection>


<Example><![CDATA[
gap> FacetSubgroup(AutomorphismGroup(Cube(3)));
Group([ r0, r1 ])
gap> Size(last);
8
]]></Example>


</Section>


</Chapter>

