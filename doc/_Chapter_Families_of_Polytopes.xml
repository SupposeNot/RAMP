<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Families_of_Polytopes">
<Heading>Families of Polytopes</Heading>

<Section Label="Chapter_Families_of_Polytopes_Section_Classical_polytopes">
<Heading>Classical polytopes</Heading>

<ManSection>
  <Oper Arg="" Name="Vertex" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the universal 0-polytope.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Vertex();
UniversalPolytope(0)
]]></Example>


<ManSection>
  <Oper Arg="" Name="Edge" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the universal 1-polytope.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Edge();
UniversalPolytope(1)
]]></Example>


<ManSection>
  <Oper Arg="p" Name="Pgon" Label="for IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the p-gon.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Facets(Pgon(5));
[ UniversalPolytope(1) ]
]]></Example>


<ManSection>
  <Oper Arg="n" Name="Cube" Label="for IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the n-cube.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Fvector(Cube(4));
[ 16, 32, 24, 8 ]
]]></Example>


<ManSection>
  <Oper Arg="n" Name="HemiCube" Label="for IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the n-hemi-cube.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Fvector(HemiCube(4));
[ 8, 16, 12, 4 ]
]]></Example>


<ManSection>
  <Oper Arg="n" Name="CrossPolytope" Label="for IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the n-cross-polytope.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfVertices(CrossPolytope(5));
10
]]></Example>


<ManSection>
  <Oper Arg="" Name="Octahedron" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the octahedron (3-cross-polytope).
 </Description>
</ManSection>


<Example><![CDATA[
gap> Octahedron() = CrossPolytope(3)
true
]]></Example>


<ManSection>
  <Oper Arg="n" Name="HemiCrossPolytope" Label="for IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the n-hemi-cross-polytope.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfVertices(HemiCrossPolytope(5));
5
]]></Example>


<ManSection>
  <Oper Arg="n" Name="Simplex" Label="for IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the n-simplex.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Petrial(Simplex(3))=HemiCube(3);
true
]]></Example>


<ManSection>
  <Oper Arg="" Name="Tetrahedron" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the tetrahedron (3-simplex).
 </Description>
</ManSection>


<Example><![CDATA[
gap> Tetrahedron() = Simplex(3)
true
]]></Example>


<ManSection>
  <Oper Arg="n" Name="CubicTiling" Label="for IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the rank <Math>n+1</Math> polytope; the tiling of <Math>E^n</Math> by <Math>n</Math>-cubes.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(CubicTiling(3));
[ 4, 3, 4 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="Dodecahedron" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the dodecahedron, <Code>{5, 3}</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Dual(Dodecahedron());
Icosahedron()
]]></Example>


<ManSection>
  <Oper Arg="" Name="HemiDodecahedron" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the hemi-dodecahedron, <Code>{5, 3}_5</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Dual(HemiDodecahedron());
ReflexibleManiplex([ 3, 5 ], "(r2*r1*r0)^5")
]]></Example>


<ManSection>
  <Oper Arg="" Name="Icosahedron" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the icosahedron, <Code>{3, 5}</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Dual(Icosahedron());
Dodecahedron()
]]></Example>


<ManSection>
  <Oper Arg="" Name="HemiIcosahedron" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the hemi-icosahedron, <Code>{3, 5}_5</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Fvector(HemiIcosahedron());
[ 6, 15, 10 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="SmallStellatedDodecahedron" />
 <Returns>IsPolytope
</Returns>
 <Description>
Constructs the small stellated dodecahedron combinatorially. This is the same combinatorial object as the great dodecahedron. You may also use the command <Code>GreatDodecahedron();</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SmallStellatedDodecahedron()=GreatDodecahedron();
true
gap> Size(GreatDodecahedron());
120
]]></Example>


<ManSection>
  <Oper Arg="" Name="24Cell" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the 24-cell, <Code>{3, 4, 3}</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(24Cell());
[ 3, 4, 3 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="Hemi24Cell" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the hemi-24-cell, <Code>{3, 4, 3}_6</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Hemi24Cell());
[ 3, 4, 3 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="120Cell" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the 120-cell, {5, 3, 3}.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfIFaces(120Cell(),3);
120
]]></Example>


<ManSection>
  <Oper Arg="" Name="Hemi120Cell" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the hemi-120-cell, <Code>{5, 3, 3}_15</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfIFaces(Hemi120Cell(),3);
60
]]></Example>


<ManSection>
  <Oper Arg="" Name="600Cell" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the 600-cell, <Code>{3, 3, 5}</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Dual(600Cell());
120Cell()
]]></Example>


<ManSection>
  <Oper Arg="" Name="Hemi600Cell" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the hemi-600-cell, <Code>{3, 3, 5}_15</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Dual(Hemi600Cell())=Hemi120Cell();
true
]]></Example>


<ManSection>
  <Oper Arg="" Name="BrucknerSphere" />
 <Returns>IsPoset
</Returns>
 <Description>
Returns Bruckner's sphere.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsLattice(BrucknerSphere());
true
]]></Example>


<ManSection>
  <Oper Arg="p" Name="InternallySelfDualPolyhedron1" Label="for IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Constructs the internally self-dual polyhedron of type <Code>{p, p}</Code> described in Theorem 5.3 of
 <Cite Key="CunMix17"/>. #(<URL> https://doi.org/10.11575/cdm.v12i2.62785</URL>). 
 p must be at least 7.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(InternallySelfDualPolyhedron1(40));
[ 40, 40 ]
]]></Example>


<ManSection>
  <Oper Arg="p, k" Name="InternallySelfDualPolyhedron2" Label="for IsInt, IsInt"/>
 <Returns>IsPolytope
</Returns>
 <Description>
Constructs the internally self-dual polyhedron of type <Code>{p, p}</Code> described in Theorem 5.8 of <Cite Key="CunMix17"/>.# (<URL> https://doi.org/10.11575/cdm.v12i2.62785</URL>).
 <Code>p</Code> must be even and at least 6, and <Code>k</Code> must be odd.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(InternallySelfDualPolyhedron2(40,7));
[ 40, 40 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="GrandAntiprism" />
 <Returns>IsPolytope
</Returns>
 <Description>
Returns the Grand Antiprism.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="n" Name="STG1" Label="for IsInt"/>
 <Returns>premaniplex
</Returns>
 <Description>
Builds the 1 flag premaniplex of rank <A>n</A>.
 See VOLTAGE OPERATIONS ON MANIPLEXES (citation coming soon).
 </Description>
</ManSection>


<Example><![CDATA[
gap> STG1(5);
Premaniplex of rank 5 with 1 flag
]]></Example>


<ManSection>
  <Oper Arg="n, I" Name="STG2" Label="for IsInt,IsList"/>
 <Returns>premaniplex
</Returns>
 <Description>
Builds the 2 flag premaniplex of rank <A>n</A> with semi-edges in <A>I</A>.
 See VOLTAGE OPERATIONS ON MANIPLEXES (citation coming soon).
 </Description>
</ManSection>


<Example><![CDATA[
gap> STG2(5,[2,4]);
Premaniplex of rank 5 with 2 flags
]]></Example>


<ManSection>
  <Oper Arg="n, i" Name="STG3" Label="for IsInt,IsInt"/>
 <Returns>premaniplex
</Returns>
 <Description>
Builds the 3 flag premaniplex of rank <A>n</A> described on Page 11 of Symmetry Type Graphs of Polytopes and Maniplexes <Cite Key="CDHT15"/> (<URL>https://doi.org/10.1007/s00026-015-0263-z</URL>). The edges of label i-1 and i+1 are parallel.
 </Description>
</ManSection>


<Example><![CDATA[
gap> STG3(5,2);
Premaniplex of rank 5 with 3 flags
]]></Example>


<ManSection>
  <Oper Arg="n, i, j" Name="STG3" Label="for IsInt,IsInt,IsInt"/>
 <Returns>premaniplex
</Returns>
 <Description>
Assumes <Code>j=i+1</Code> and builds the 3 flag premaniplex of rank <A>n</A> described on Page 11 of Symmetry Type Graphs of Polytopes and Maniplexes <Cite Key="CDHT15"/> (<URL>https://doi.org/10.1007/s00026-015-0263-z</URL>). There are edges of label <A>i</A> and <A>j</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> STG3(6,2,3);
Premaniplex of rank 6 with 3 flags
]]></Example>


</Section>


<Section Label="Chapter_Families_of_Polytopes_Section_Flat_and_tight_polytopes">
<Heading>Flat and tight polytopes</Heading>

<ManSection>
  <Oper Arg="p, q, i, j" Name="FlatOrientablyRegularPolyhedron" Label="for IsInt, IsInt, IsInt, IsInt"/>
 <Returns>polyhedron
</Returns>
 <Description>
<Code>polyhedron</Code> is the flat orientably regular polyhedron with automorphism group [p, q] / (r2 r1 r0 r1 = (r0 r1)^i (r1 r2)^j). This function validates the inputs to make sure that the polyhedron is well-defined.
 Use FlatOrientablyRegularPolyhedronNC if you do not want this validation.
 </Description>
</ManSection>


<Example><![CDATA[
gap> FlatOrientablyRegularPolyhedron(4,2,3,3);
FlatOrientablyRegularPolyhedron(4,2,-1,1)
]]></Example>


<ManSection>
  <Oper Arg="sym" Name="FlatOrientablyRegularPolyhedraOfType" Label="for IsList"/>
 <Description>
Returns a list of all flat, orientably regular polyhedra with Schlafli symbol <A>sym</A>.
 </Description>
</ManSection>


<Example><![CDATA[
ap> FlatOrientablyRegularPolyhedraOfType([6,6]);
[ FlatOrientablyRegularPolyhedron(6,6,3,1), FlatOrientablyRegularPolyhedron(6,6,-1,1), 
  FlatOrientablyRegularPolyhedron(6,6,-1,3) ]
]]></Example>


<ManSection>
  <Oper Arg="sym" Name="TightOrientablyRegularPolytopesOfType" Label="for IsList"/>
 <Description>
Returns a list of all tight, orientably regular polytopes with Schlafli symbol <A>sym</A>. When <A>sym</A> has length 2, this just calls FlatOrientablyRegularPolyhedraOfType(<A>sym</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> TightOrientablyRegularPolytopesOfType([6,6]);
[ FlatOrientablyRegularPolyhedron(6,6,3,1), FlatOrientablyRegularPolyhedron(6,6,-1,1), 
  FlatOrientablyRegularPolyhedron(6,6,-1,3) ]
]]></Example>


</Section>


<Section Label="Chapter_Families_of_Polytopes_Section_The_Tomotope">
<Heading>The Tomotope</Heading>

<ManSection>
  <Oper Arg="" Name="Tomotope" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the <Emph>Tomotope</Emph> from <Cite Key="MonPelWil12"/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Tomotope());
[ 3, [ 3, 4 ], 4 ]
]]></Example>


</Section>


<Section Label="Chapter_Families_of_Polytopes_Section_Toroids">
<Heading>Toroids</Heading>

<ManSection>
  <Func Arg="u [, v]" Name="ToroidalMap44" />
 <Returns>IsManiplex
</Returns>
 <Description>
Returns the toroidal map <Math>\{4,4\}_{\vec u, \vec v}</Math>.
 If only <A>u</A> is given, then <A>v</A> is taken to be <A>u</A> rotated 90 degrees,
 in which case the resulting map is either reflexible or chiral.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ToroidalMap44([3,0]) = ARP([4,4], "(r0 r1 r2 r1)^3");
true
gap> M := ToroidalMap44([1,2]);; IsChiral(M);
true
gap> ToroidalMap44([5,0]) = SmallestReflexibleCover(M);
true
gap> M := ToroidalMap44([2,0],[0,3]);; NumberOfFlagOrbits(M);
2
gap> M = ARP([4,4]) / "(r0 r1 r2 r1)^2, (r1 r0 r1 r2)^3";
true
gap> SmallestReflexibleCover(M) = ToroidalMap44([6,0]);
true
gap> ToroidalMap44([2,3],[4,1]) = ToroidalMap44([-3,2],[-1,4]);
true
]]></Example>


<ManSection>
  <Func Arg="u [, v]" Name="ToroidalMap36" />
 <Returns>IsManiplex
</Returns>
 <Description>
Returns the toroidal map <Math>\{3,6\}_{\vec u, \vec v}</Math>.
 If only <A>u</A> is given, then we return the corresponding reflexible map 
 (if <A>u</A> is [a, 0] or [a, a]) or chiral map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Size(ToroidalMap36([3,0])) = 108;
true
gap> SmallestReflexibleCover(ToroidalMap36([2,3])) = ToroidalMap36([19,0]);
true
gap> ToroidalMap36([3,0]) = ToroidalMap36([3,0],[0,3]);
true
gap> ToroidalMap36([2,3]) = ToroidalMap36([2,3],[-3,5]);
true
gap> NumberOfFlagOrbits(ToroidalMap36([3,0],[-2,4]));
3
gap> NumberOfFlagOrbits(ToroidalMap36([4,3],[5,0]));
6
]]></Example>


<ManSection>
  <Func Arg="u [, v]" Name="ToroidalMap63" />
 <Returns>IsManiplex
</Returns>
 <Description>
Returns the toroidal map <Math>\{6,3\}_{\vec u, \vec v}</Math>.
 If only <A>u</A> is given, then we return the corresponding reflexible map 
 (if <A>u</A> is [a, 0] or [a, a]) or chiral map.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Size(ToroidalMap63([3,0])) = 108;
true
gap> SmallestReflexibleCover(ToroidalMap63([2,3])) = ToroidalMap63([19,0]);
true
gap> ToroidalMap63([3,0]) = ToroidalMap63([3,0],[0,3]);
true
gap> ToroidalMap63([2,3]) = ToroidalMap63([2,3],[-3,5]);
true
gap> NumberOfFlagOrbits(ToroidalMap63([3,0],[-2,4]));
3
gap> NumberOfFlagOrbits(ToroidalMap63([4,3],[5,0]));
6
]]></Example>


<ManSection>
  <Oper Arg="s, k, n" Name="CubicToroid" Label="for IsInt,IsInt,IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given IsInt triple <A>s, k, n</A>, will return the regular toroid <Math>\{4, 3^{n-2},4\}_{\vec s}</Math> where <Math>\vec s=(s^k, 0^{n-k})</Math>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m44:=CubicToroid(3,2,2);;
gap> m44=ToroidalMap44([3,3]);
true
]]></Example>


<ManSection>
  <Oper Arg="n, vecs" Name="CubicToroid" Label="for IsInt,IsList"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given an integer n and a list of vectors <A>vecs</A>, returns the cubic toroid that is a quotient of
 CubicTiling(n) by the translation subgroup generated by the given vectors.
 The results may be nonsensical if <A>vecs</A> does not generate an n-dimensional translation group.
 </Description>
</ManSection>


<Example><![CDATA[
gap> CubicToroid(2,[[2,0],[0,2]]);
3-maniplex
gap> last=ToroidalMap44([2,0]);
true
]]></Example>


<ManSection>
  <Oper Arg="s, k" Name="3343Toroid" Label="for IsInt,IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given IsInt pair <A>s, k</A>, will return the regular toroid <Math>\{3,3,4,3\}_{\vec s}</Math> where <Math>\vec s=(s^k, 0^{n-k})</Math>. Note that <Math>k</Math> must be 1 or 2.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := 3343Toroid(3,1);
ReflexibleManiplex([ 3, 3, 4, 3 ], "(r0 r1 r2 r3 r2 r1 r4 r3 r2 r3 r4 r1 r2 r3 r2 r1)^3")
gap> IsPolytopal(M);
true
gap> IsPolytopal(3343Toroid(1,1));
false
]]></Example>


<ManSection>
  <Oper Arg="s, k" Name="24CellToroid" Label="for IsInt,IsInt"/>
 <Returns>IsManiplex
</Returns>
 <Description>
Given IsInt pair <A>s, k</A>, will return the regular toroid <Math>\{3,4,3,3\}_{\vec s}</Math> where <Math>\vec s=(s^k, 0^{n-k})</Math>. Note that <Math>k</Math> must be 1 or 2.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := 24CellToroid(3,1);;
gap> Dual(M) = 3343Toroid(3,1);
true
]]></Example>


</Section>


<Section Label="Chapter_Families_of_Polytopes_Section_Uniform_and_Archimedean_polyhedra">
<Heading>Uniform and Archimedean polyhedra</Heading>

 Representations of the uniform and Archimedean polyhedra here are from <Cite Key="HarWil10"/>.
<ManSection>
  <Oper Arg="" Name="Cuboctahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the cuboctahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(Cuboctahedron());
[ [ 3, 4 ], 4 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="TruncatedTetrahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the truncated tetrahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(TruncatedTetrahedron());
[ [ 3, 6 ], 3 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="TruncatedOctahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the truncated octahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Fvector(TruncatedOctahedron());
[ 24, 36, 14 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="TruncatedCube" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the truncated octahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Fvector(TruncatedCube());
[ 24, 36, 14 ]
gap> SchlafliSymbol(TruncatedCube());
[ [ 3, 8 ], 3 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="Icosadodecahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the icosadodecahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> VertexFigure(Icosadodecahedron());
Pgon(4)
gap> Facets(Icosadodecahedron());
[ Pgon(5), Pgon(3) ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="TruncatedIcosahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the truncated icosahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Facets(TruncatedIcosahedron());
[ Pgon(6), Pgon(5) ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="SmallRhombicuboctahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the small rhombicuboctahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ZigzagVector(SmallRhombicuboctahedron());
[ 12, 8 ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="Pseudorhombicuboctahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the pseudorhombicuboctahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Size(ConnectionGroup(Pseudorhombicuboctahedron()));
16072626615091200
]]></Example>


<ManSection>
  <Oper Arg="" Name="SnubCube" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the snub cube.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsEquivelar(PetrieDual(SnubCube()));
true
gap> SchlafliSymbol(PetrieDual(SnubCube()));
[ 30, 5 ]
gap> Size(ConnectionGroup(PetrieDual(SnubCube())));
3804202857922560
gap> Size(AutomorphismGroup(PetrieDual(SnubCube())));
24
]]></Example>


<ManSection>
  <Oper Arg="" Name="SmallRhombicosidodecahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the small rhombicosidodecahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Facets(SmallRhombicosidodecahedron());
[ Pgon(5), Pgon(4), Pgon(3) ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="GreatRhombicosidodecahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the great rhombicosidodecahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Facets(GreatRhombicosidodecahedron());
[ Pgon(10), Pgon(4), Pgon(6) ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="SnubDodecahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the small snub dodecahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Facets(SnubDodecahedron());
[ Pgon(5), Pgon(3) ]
gap> IsEquivelar(PetrieDual(SnubDodecahedron()));
true
]]></Example>


<ManSection>
  <Oper Arg="" Name="TruncatedDodecahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the truncated dodecahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Facets(TruncatedDodecahedron());
[ Pgon(10), Pgon(3) ]
]]></Example>


<ManSection>
  <Oper Arg="" Name="GreatRhombicuboctahedron" />
 <Returns>maniplex
</Returns>
 <Description>
Constructs the great rhombicuboctahedron.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Size(ConnectionGroup(GreatRhombicuboctahedron()));
5308416
]]></Example>


</Section>


</Chapter>

