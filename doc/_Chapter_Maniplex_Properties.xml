<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Maniplex_Properties">
<Heading>Maniplex Properties</Heading>

<Section Label="Chapter_Maniplex_Properties_Section_Automorphism_group_acting_on_faces_and_chains">
<Heading>Automorphism group acting on faces and chains</Heading>

<ManSection>
  <Oper Arg="M, I" Name="AutomorphismGroupOnChains" Label="for IsManiplex, IsCollection"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the chains of <A>M</A> of type <A>I</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnChains(HemiCube(3),[0,2]);
Group([ (1,2)(3,4)(5,10)(6,9)(7,8)(11,12), (2,6)(3,5)(4,7)(8,11)(10,12), (1,3)(2,4)(6,11)(7,8)
  (9,12) ])
]]></Example>


<ManSection>
  <Oper Arg="M, i" Name="AutomorphismGroupOnIFaces" Label="for IsManiplex, IsInt"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the <A>i</A>-faces of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnIFaces(HemiCube(3),2);
Group([ (), (2,3), (1,2) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="AutomorphismGroupOnVertices" Label="for IsManiplex"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the vertices of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnVertices(HemiCube(4));
Group([ (1,2)(3,4)(5,6)(7,8), (2,3)(6,8), (3,5)(4,6), (5,7)(6,8) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="AutomorphismGroupOnEdges" Label="for IsManiplex"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the edges of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnEdges(Simplex(4));
Group([ (2,5)(3,6)(4,7), (1,2)(6,8)(7,9), (2,3)(5,6)(9,10), (3,4)(6,7)(8,9) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="AutomorphismGroupOnFacets" Label="for IsManiplex"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the facets of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnFacets(HemiCube(5));
Group([ (), (4,5), (3,4), (2,3), (1,2) ])
]]></Example>


</Section>


<Section Label="Chapter_Maniplex_Properties_Section_Number_of_orbits_and_transitivity">
<Heading>Number of orbits and transitivity</Heading>

<ManSection>
  <Oper Arg="M, I" Name="NumberOfChainOrbits" Label="for IsManiplex, IsCollection"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of chains of type <A>I</A> under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfChainOrbits(Cuboctahedron(),[0,2]);
2
]]></Example>


<ManSection>
  <Oper Arg="M, i" Name="NumberOfIFaceOrbits" Label="for IsManiplex, IsInt"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of <A>i</A>-faces under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfIFaceOrbits(SnubDodecahedron(),2);
3
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfVertexOrbits" Label="for IsManiplex"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of vertices under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfVertexOrbits(Dual(SnubDodecahedron()));
3
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfEdgeOrbits" Label="for IsManiplex"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of edges under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfEdgeOrbits(SnubDodecahedron());
3
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfFacetOrbits" Label="for IsManiplex"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of facets under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfFacetOrbits(SnubCube());
3
]]></Example>


<ManSection>
  <Oper Arg="M, I" Name="IsChainTransitive" Label="for IsManiplex, IsCollection"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 chains of type <A>I</A> is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsChainTransitive(SmallRhombicuboctahedron(),[0,2]);
false
gap> IsChainTransitive(SmallRhombicuboctahedron(),[0,1]);
false
gap> IsChainTransitive(Cuboctahedron(),[0,1]);
true
]]></Example>


<ManSection>
  <Oper Arg="M, i" Name="IsIFaceTransitive" Label="for IsManiplex, IsInt"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 <A>i</A>-faces is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsIFaceTransitive(Cuboctahedron(),1);
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsVertexTransitive" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 vertices is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsVertexTransitive(Bk2l(4,5));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsEdgeTransitive" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 edges is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsEdgeTransitive(Prism(Simplex(3)));
false
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsFacetTransitive" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 facets is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFacetTransitive(Prism(HemiCube(3)));
false
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsFullyTransitive" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 i-faces is transitive for every i.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFullyTransitive(SmallRhombicuboctahedron());
false
gap> IsFullyTransitive(Bk2l(4,5));
true
]]></Example>


</Section>


<Section Label="Chapter_Maniplex_Properties_Section_Flag_orbits">
<Heading>Flag orbits</Heading>

<ManSection>
  <Attr Arg="M" Name="Flags" Label="for IsManiplex"/>
 <Returns>IsList
</Returns>
 <Description>
The list of flags of the maniplex <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Flags(Pgon(5));
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
gap> M := Maniplex(Group((3,4)(5,6)(7,8)(9,10), (3,6)(4,5)(7,10)(8,9), (3,7)(4,8)(5,9)(6,10)));;
gap> Flags(M);
[ 3, 4, 5, 6, 7, 8, 9, 10 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="BaseFlag" Label="for IsManiplex"/>
 <Returns>IsObject
</Returns>
 <Description>
The base flag of the maniplex <A>M</A>. By default, when the set of flags is a set of positive integers,
 the base flag is the minimum of the set of flags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> BaseFlag(Cube(3));
1
gap> M := Maniplex(Group((3,4)(5,6)(7,8)(9,10), (3,6)(4,5)(7,10)(8,9), (3,7)(4,8)(5,9)(6,10)));;
gap> BaseFlag(M);
3
]]></Example>


<ManSection>
  <Attr Arg="M[, A]" Name="SymmetryTypeGraph" Label="for IsManiplex"/>
 <Returns>IsPremaniplex
</Returns>
 <Description>
Returns the Symmetry Type Graph of the maniplex <A>M</A> with respect to the subgroup <A>A</A> of the automorphism
 group; that is, the quotient of the flag graph of <A>M</A> by <A>A</A>. If <A>A</A> is not included, then returns the Symmetry
 Type Graph relative to the whole automorphism group of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SymmetryTypeGraph(Prism(Simplex(3)));
Edge labeled graph with 4 vertices, and edge labels [ 0, 1, 2, 3 ]
gap> M:=Cube(3);;
gap> A:=AutomorphismGroupOnFlags(M);;
gap> B:=Group(A.1,A.2*A.3);;
gap> SymmetryTypeGraph(M,B);
Edge labeled graph with 2 vertices, and edge labels [ 0, 1, 2 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfFlagOrbits" Label="for IsManiplex"/>
 <Description>
 Returns the number of orbits of the automorphism group of <A>M</A>
 on its flags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfFlagOrbits(Prism(Simplex(3)));
4
]]></Example>


<ManSection>
  <Attr Arg="M" Name="FlagOrbitRepresentatives" Label="for IsManiplex"/>
 <Description>
 Returns one flag from each orbit under the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> FlagOrbitRepresentatives(Prism(Simplex(3)));
[ 1, 49, 97, 145 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="FlagOrbitsStabilizer" Label="for IsManiplex"/>
 <Returns>g
</Returns>
 <Description>
Returns the subgroup of the connection group that preserves the flag orbits under the action of the automorphism group.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m:=Prism(Dodecahedron());
Prism(Dodecahedron())
gap> s:=FlagOrbitsStabilizer(m);
<permutation group of size 207360000 with 12 generators>
gap> IsSubgroup(ConnectionGroup(m),s);
true
gap> AsSet(Orbit(AutomorphismGroupOnFlags(m),1))=AsSet(Orbit(s,1));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsReflexible" Label="for IsManiplex"/>
 <Returns>Whether the maniplex <A>M</A> is reflexible (has one flag orbit).
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsReflexible(Epsilonk(6));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsChiral" Label="for IsManiplex"/>
 <Returns>Whether the maniplex <A>M</A> is chiral.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsChiral(ToroidalMap44([2,3]));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsRotary" Label="for IsManiplex"/>
 <Returns>Whether the maniplex <A>M</A> is rotary; i.e., whether it is  either reflexible or chiral.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsRotary(ToroidalMap44([3,5]));
true
]]></Example>


<ManSection>
  <Attr Arg="M" Name="FlagOrbits" Label="for IsManiplex"/>
 <Description>
 Returns a list of lists of flags, representing the orbits of flags under the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> FlagOrbits(ToroidalMap44([3,2]));
[ [ 1, 9, 7, 33, 15, 63, 5, 65, 39, 23, 13, 71, 61, 101, 3, 89, 47, 37, 95, 21, 11, 79, 69, 29, 59, 77, 99, 51, 49, 55, 45, 35, 103, 93, 19, 83, 87, 67, 85, 27, 57, 75, 91, 97, 43, 81, 53, 31, 17, 25, 73, 41 ], 
  [ 2, 10, 8, 34, 16, 64, 6, 66, 40, 24, 14, 72, 62, 102, 4, 90, 48, 38, 96, 22, 12, 80, 70, 30, 60, 78, 100, 52, 50, 56, 46, 36, 104, 94, 20, 84, 88, 68, 86, 28, 58, 76, 92, 98, 44, 82, 54, 32, 18, 26, 74, 42 ] ]
]]></Example>


</Section>


<Section Label="Chapter_Maniplex_Properties_Section_Orientability">
<Heading>Orientability</Heading>

<ManSection>
  <Prop Arg="M" Name="IsOrientable" Label="for IsManiplex"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
A maniplex is orientable if its flag graph is bipartite.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsOrientable(HemiCube(3));
false
gap> IsOrientable(Cube(3));
true
]]></Example>


<ManSection>
  <Oper Arg="M, I" Name="IsIOrientable" Label="for IsManiplex, IsList"/>
 <Description>
For a subset I of {0, ..., n-1}, a maniplex is I-orientable
 if every closed path in its flag graph contains an even number
 of edges with colors in I.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsIOrientable(HemiCube(3),[1,2]);
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsVertexBipartite" Label="for IsManiplex"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
A maniplex is vertex-bipartite if its 1-skeleton is
 bipartite. This is equivalent to being I-orientable for
 I = {0}.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsVertexBipartite(HemiCube(4));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsFacetBipartite" Label="for IsManiplex"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
A maniplex is facet-bipartite if the 1-skeleton of its
 dual is bipartite. This is equivalent to being I-orientable for
 I = {n-1}.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFacetBipartite(HemiCube(4));
false
]]></Example>


<ManSection>
  <Attr Arg="M" Name="OrientableCover" Label="for IsManiplex"/>
 <Description>
Returns the minimal <Emph>orientable cover</Emph> of the maniplex <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> OrientableCover(HemiCube(3))=Cube(3);
true
]]></Example>


<ManSection>
  <Oper Arg="M, I" Name="IOrientableCover" Label="for IsManiplex, IsList"/>
 <Description>
Returns the minimal <Emph>I-orientable cover</Emph> of the maniplex <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(IOrientableCover(Cube(3), [2]));
[ 4, 6 ]
]]></Example>


</Section>


<Section Label="Chapter_Maniplex_Properties_Section_Faithfulness">
<Heading>Faithfulness</Heading>

<ManSection>
  <Prop Arg="M" Name="IsVertexFaithful" Label="for IsManiplex"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Returns whether the reflexible maniplex <A>M</A> is
 vertex-faithful; i.e., whether the action of the automorphism
 group on the vertices is faithful.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsVertexFaithful(HemiCube(3));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsFacetFaithful" Label="for IsManiplex"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Returns whether the reflexible maniplex <A>M</A> is
 facet-faithful; i.e., whether the action of the automorphism
 group on the facets is faithful.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFacetFaithful(HemiCube(3));
false
gap> IsFacetFaithful(Cube(3));
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="MaxVertexFaithfulQuotient" Label="for IsManiplex"/>
 <Returns>Q
</Returns>
 <Description>
Returns the maximal vertex-faithful reflexible maniplex covered by <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> MaxVertexFaithfulQuotient(HemiCrossPolytope(3));
reflexible 3-maniplex
gap> SchlafliSymbol(last);
[ 3, 2 ]
]]></Example>


<ManSection>
  <Prop Arg="M" Name="SatisfiesWeakPathIntersectionProperty" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Tests for the weak path intersection property in a maniplex. Definitions and description available in <Cite Key="GleHub18"/>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="m" Name="IsFaithful" Label="for IsManiplex"/>
 <Description>
Returns whether the maniplex <A>m</A> is
 faithful, as defined in "Polytopality of Maniplexes"; i.e., whether for each flag the intersection of all the i-faces containing that flag is just the flag itself.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFaithful(Cube(3));
true
gap> IsFaithful(ToroidalMap44([1,0]));
false
]]></Example>


</Section>


</Chapter>

