<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Maniplex_Properties">
<Heading>Algebraic Structure of Maniplexes</Heading>

<Section Label="Chapter_Maniplex_Properties_Section_Groups_of_Maps_Polytopes_and_Maniplexes">
<Heading>Groups of Maps, Polytopes, and Maniplexes</Heading>

<ManSection Label="Automorphism_Group">
<Heading>Automorphism Groups</Heading>
  <Attr Arg="M" Name="AutomorphismGroup" Label="for IsPremaniplex"/>
  <Attr Arg="M" Name="AutomorphismGroupFpGroup" Label="for IsManiplex"/>
  <Attr Arg="M" Name="AutomorphismGroupPermGroup" Label="for IsManiplex"/>
  <Attr Arg="M" Name="AutomorphismGroupOnFlags" Label="for IsManiplex"/>
 <Description>
 Returns the automorphism group of <A>M</A>.
 This group is not guaranteed to be in any particular form. For particular permutation representations you should consider the various AutomorphismGroupOn... functions, or AutomorphismGroupFpGroup.
 Returns the automorphism group of <A>M</A> as a
 finitely presented group. If <A>M</A> is reflexible, then this is guaranteed to be the standard presentation.
 Returns the automorphism group of <A>M</A> as a
 permutation group. This group is not guaranteed to be in any particular form. For particular permutation representations you should consider the various AutomorphismGroupOn... functions.
 Returns the automorphism group of <A>M</A> as a
 permutation group action on the flags of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> s0 := (3,7)(4,8)(5,6);;
gap> s1 := (2,3)(4,6)(5,7);;
gap> s2 := (1,2)(3,6)(4,8)(5,7);;
gap> poly := Group([s0,s1,s2]);;
gap> p:=ARP(poly);
regular 3-polytope
gap> AutomorphismGroup(p);
Group([ (3,7)(4,8)(5,6), (2,3)(4,6)(5,7), (1,2)(3,6)(4,8)(5,7) ])
gap> AutomorphismGroupFpGroup(p);
<fp group on the generators [ r0, r1, r2 ]>
gap> AutomorphismGroupPermGroup(Cube(3));
Group([ (3,4), (2,3)(4,5), (1,2)(5,6) ])
gap> AutomorphismGroupOnFlags(Cube(3));
<permutation group with 3 generators>
gap> GeneratorsOfGroup(last);
[ (1,20)(2,13)(3,10)(4,34)(5,35)(6,7)(8,27)(9,28)(11,23)(12,24)(14,44)(15,45)(16,18)(17,19)(21,40)(22,41)(25,37)(26,38)(29,48)(30,32)(31,33)(36,47)(39,46)(42,43), 
  (1,11)(2,18)(3,4)(5,26)(6,41)(7,8)(9,33)(10,45)(12,15)(13,31)(14,25)(16,28)(17,27)(19,22)(20,38)(21,32)(23,35)(24,34)(29,39)(30,47)(36,43)(37,48)(40,42)(44,46), 
  (1,3)(2,7)(4,25)(5,28)(6,13)(8,32)(9,35)(10,20)(11,14)(12,17)(15,47)(16,40)(18,21)(19,24)(22,48)(23,44)(26,42)(27,30)(29,41)(31,39)(33,46)(34,37)(36,45)(38,43) ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ConnectionGroup" Label="for IsPremaniplex"/>
 <Description>
 Returns the connection group of the premaniplex <A>M</A> as a
 permutation group. We may eventually allow other types
 of connection groups.
 Synonym: MonodromyGroup
 </Description>
</ManSection>


<Example><![CDATA[
gap> ConnectionGroup(HemiCube(3));
Group([ (1,8)(2,7)(3,14)(4,13)(5,20)(6,19)(9,16)(10,15)(11,22)(12,21)(17,24)(18,23), (1,3)(2,5)
  (4,6)(7,9)(8,11)(10,12)(13,15)(14,17)(16,18)(19,21)(20,23)(22,24), (1,2)(3,4)(5,6)(7,8)(9,10)
  (11,12)(13,14)(15,16)(17,18)(19,20)(21,22)(23,24) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="EvenConnectionGroup" Label="for IsManiplex"/>
 <Description>
 Returns the even-word subgroup of the connection group of <A>M</A> as a
 permutation group. 
 </Description>
</ManSection>


<Example><![CDATA[
gap> EvenConnectionGroup(HemiCube(3));
Group([ (1,11,24,14)(2,9,18,20)(3,17,22,8)(4,15,12,19)(5,23,16,7)(6,21,10,13), (1,4,5)(2,6,3)
  (7,10,11)(8,12,9)(13,16,17)(14,18,15)(19,22,23)(20,24,21) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="RotationGroup" Label="for IsManiplex"/>
 <Description>
 Returns the rotation group of <A>M</A>.
 This group is not guaranteed to be in any particular form.
 </Description>
</ManSection>


<Example><![CDATA[
gap> RotationGroup(HemiCube(3));
Group([ r0*r1, r1*r2 ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="RotationGroupFpGroup" Label="for IsManiplex"/>
 <Description>
 Returns the rotation group of <A>M</A>, as a finitely presented group
 on the standard generators.
 </Description>
</ManSection>


<Example><![CDATA[
gap> RotationGroupFpGroup(ToroidalMap44([1,2]));
<fp group on the generators [ s1, s2 ]>
gap> RelatorsOfFpGroup(last);
[ (s1*s2)^2, s1^4, s2^4, s2^-1*s1*(s2*s1^-1)^2 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ChiralityGroup" Label="for IsRotaryManiplex"/>
 <Description>
 Returns the chirality group of the rotary maniplex <A>M</A>.
 This is the kernel of the group epimorphism from the
 rotation group of <A>M</A> to the rotation group of its maximal
 reflexible quotient. In particular, the chirality group
 is trivial if and only if <A>M</A> is reflexible.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := ToroidalMap44([1,2]);
ToroidalMap44([ 1, 2 ])
gap> G := ChiralityGroup(M);
Group([ s2^-1*s1^-1*s2*s1^3*s2*s1 ])
gap> Size(G);
5
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ExtraRelators" Label="for IsReflexibleManiplex"/>
 <Description>
 For a reflexible maniplex <A>M</A>, returns the relators
 needed to define its automorphism group as a quotient of
 the string Coxeter group given by its Schlafli symbol.
 Not particularly robust at the moment.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ExtraRelators(HemiCube(3));
[ (r0*r1*r2)^3 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ExtraRotRelators" Label="for IsRotaryManiplex"/>
 <Description>
 For a reflexible maniplex <A>M</A>, returns the relators
 needed to define its rotation group as a quotient of
 the rotation group of a string Coxeter group given by its Schlafli symbol.
 Not particularly robust at the moment.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ExtraRotRelators(HemiCube(3));
[ (F2^-1*F1^-1)^2, (F2*F1^2*F2^-1*F1^-1)^2 ]
]]></Example>


<ManSection>
  <Oper Arg="permgroup" Name="IsManiplexable" Label="for IsPermGroup"/>
 <Returns><Code>Boolean</Code>.
</Returns>
 <Description>
Given a permutation group, it asks if the generators could be the connection group of a maniplex.
 That is to say, are each of the generators and their products fixed point free.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Maniplex_Properties_Section_Automorphism_group_acting_on_faces_and_chains">
<Heading>Automorphism group acting on faces and chains</Heading>

<ManSection>
  <Oper Arg="M, I" Name="AutomorphismGroupOnChains" Label="for IsManiplex, IsCollection"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the chains of <A>M</A> of type <A>I</A>.
 If the automorphism group has a standard set of generators in a standard order, then the output
 is generated by the action of those generators.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnChains(HemiCube(3),[0,2]);
Group([ (1,2)(3,4)(5,10)(6,9)(7,8)(11,12), (2,6)(3,5)(4,7)(8,11)(10,12), (1,3)(2,4)(6,11)(7,8)
  (9,12) ])
]]></Example>


<ManSection>
  <Oper Arg="M, i" Name="AutomorphismGroupOnIFaces" Label="for IsManiplex, IsInt"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the <A>i</A>-faces of <A>M</A>.
 If the automorphism group has a standard set of generators in a standard order, then the output
 is generated by the action of those generators.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnIFaces(HemiCube(3),2);
Group([ (), (2,3), (1,2) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="AutomorphismGroupOnVertices" Label="for IsManiplex"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the vertices of <A>M</A>.
 If the automorphism group has a standard set of generators in a standard order, then the output
 is generated by the action of those generators.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnVertices(HemiCube(4));
Group([ (1,2)(3,4)(5,6)(7,8), (2,3)(6,8), (3,5)(4,6), (5,7)(6,8) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="AutomorphismGroupOnEdges" Label="for IsManiplex"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the edges of <A>M</A>.
 If the automorphism group has a standard set of generators in a standard order, then the output
 is generated by the action of those generators.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnEdges(Simplex(4));
Group([ (2,5)(3,6)(4,7), (1,2)(6,8)(7,9), (2,3)(5,6)(9,10), (3,4)(6,7)(8,9) ])
]]></Example>


<ManSection>
  <Attr Arg="M" Name="AutomorphismGroupOnFacets" Label="for IsManiplex"/>
 <Returns>IsPermGroup
</Returns>
 <Description>
Returns a permutation group, representing the action of
 AutomorphismGroup(<A>M</A>) on the facets of <A>M</A>.
 If the automorphism group has a standard set of generators in a standard order, then the output
 is generated by the action of those generators.
 </Description>
</ManSection>


<Example><![CDATA[
gap> AutomorphismGroupOnFacets(HemiCube(5));
Group([ (), (4,5), (3,4), (2,3), (1,2) ])
]]></Example>


</Section>


<Section Label="Chapter_Maniplex_Properties_Section_Number_of_orbits_and_transitivity">
<Heading>Number of orbits and transitivity</Heading>

<ManSection>
  <Oper Arg="M, I" Name="NumberOfChainOrbits" Label="for IsManiplex, IsCollection"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of chains of type <A>I</A> under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfChainOrbits(Cuboctahedron(),[0,2]);
2
]]></Example>


<ManSection>
  <Oper Arg="M, i" Name="NumberOfIFaceOrbits" Label="for IsManiplex, IsInt"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of <A>i</A>-faces under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfIFaceOrbits(SnubDodecahedron(),2);
3
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfVertexOrbits" Label="for IsManiplex"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of vertices under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfVertexOrbits(Dual(SnubDodecahedron()));
3
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfEdgeOrbits" Label="for IsManiplex"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of edges under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfEdgeOrbits(SnubDodecahedron());
3
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfFacetOrbits" Label="for IsManiplex"/>
 <Returns>IsInt
</Returns>
 <Description>
Returns the number of orbits of facets under
 the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfFacetOrbits(SnubCube());
3
]]></Example>


<ManSection>
  <Oper Arg="M, I" Name="IsChainTransitive" Label="for IsManiplex, IsCollection"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 chains of type <A>I</A> is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsChainTransitive(SmallRhombicuboctahedron(),[0,2]);
false
gap> IsChainTransitive(SmallRhombicuboctahedron(),[0,1]);
false
gap> IsChainTransitive(Cuboctahedron(),[0,1]);
true
]]></Example>


<ManSection>
  <Oper Arg="M, i" Name="IsIFaceTransitive" Label="for IsManiplex, IsInt"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 <A>i</A>-faces is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsIFaceTransitive(Cuboctahedron(),1);
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsVertexTransitive" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 vertices is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsVertexTransitive(Bk2l(4,5));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsEdgeTransitive" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 edges is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsEdgeTransitive(Prism(Simplex(3)));
false
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsFacetTransitive" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 facets is transitive.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFacetTransitive(Prism(HemiCube(3)));
false
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsFullyTransitive" Label="for IsManiplex"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether the action of AutomorphismGroup(<A>M</A>) on
 i-faces is transitive for every i.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFullyTransitive(SmallRhombicuboctahedron());
false
gap> IsFullyTransitive(Bk2l(4,5));
true
]]></Example>


</Section>


<Section Label="Chapter_Maniplex_Properties_Section_Faithfulness">
<Heading>Faithfulness</Heading>

<ManSection>
  <Prop Arg="M" Name="IsVertexFaithful" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
Returns whether the reflexible maniplex <A>M</A> is
 vertex-faithful; i.e., whether the action of the automorphism
 group on the vertices is faithful.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsVertexFaithful(HemiCube(3));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsFacetFaithful" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
Returns whether the reflexible maniplex <A>M</A> is
 facet-faithful; i.e., whether the action of the automorphism
 group on the facets is faithful.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFacetFaithful(HemiCube(3));
false
gap> IsFacetFaithful(Cube(3));
true
]]></Example>


<ManSection>
  <Oper Arg="M" Name="MaxVertexFaithfulQuotient" Label="for IsManiplex"/>
 <Returns>Q
</Returns>
 <Description>
Returns the maximal vertex-faithful reflexible maniplex covered by <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> MaxVertexFaithfulQuotient(HemiCrossPolytope(3));
reflexible 3-maniplex
gap> SchlafliSymbol(last);
[ 3, 2 ]
]]></Example>


</Section>


<Section Label="Chapter_Maniplex_Properties_Section_Flag_orbits">
<Heading>Flag orbits</Heading>

<ManSection>
  <Attr Arg="M" Name="Flags" Label="for IsPremaniplex"/>
 <Returns>IsList
</Returns>
 <Description>
The list of flags of the premaniplex <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Flags(Pgon(5));
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
gap> M := Maniplex(Group((3,4)(5,6)(7,8)(9,10), (3,6)(4,5)(7,10)(8,9), (3,7)(4,8)(5,9)(6,10)));;
gap> Flags(M);
[ 3, 4, 5, 6, 7, 8, 9, 10 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="BaseFlag" Label="for IsPremaniplex"/>
 <Returns>IsObject
</Returns>
 <Description>
The base flag of the premaniplex <A>M</A>. By default, when the set of flags is a set of positive integers,
 the base flag is the minimum of the set of flags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> BaseFlag(Cube(3));
1
gap> M := Maniplex(Group((3,4)(5,6)(7,8)(9,10), (3,6)(4,5)(7,10)(8,9), (3,7)(4,8)(5,9)(6,10)));;
gap> BaseFlag(M);
3
]]></Example>


<ManSection>
  <Attr Arg="M[, A]" Name="SymmetryTypeGraph" Label="for IsPremaniplex"/>
 <Returns>IsPremaniplex
</Returns>
 <Description>
Returns the Symmetry Type Graph of the premaniplex <A>M</A> with respect to the subgroup <A>A</A> of the automorphism
 group; that is, the quotient of the flag graph of <A>M</A> by <A>A</A>. If <A>A</A> is not included, then returns the Symmetry
 Type Graph relative to the whole automorphism group of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SymmetryTypeGraph(Prism(Simplex(3)));
Edge labeled graph with 4 vertices, and edge labels [ 0, 1, 2, 3 ]
gap> M:=Cube(3);;
gap> A:=AutomorphismGroupOnFlags(M);;
gap> B:=Group(A.1,A.2*A.3);;
gap> SymmetryTypeGraph(M,B);
Edge labeled graph with 2 vertices, and edge labels [ 0, 1, 2 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfFlagOrbits" Label="for IsPremaniplex"/>
 <Description>
 Returns the number of orbits of the automorphism group of <A>M</A>
 on its flags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfFlagOrbits(Prism(Simplex(3)));
4
]]></Example>


<ManSection>
  <Attr Arg="M" Name="FlagOrbitRepresentatives" Label="for IsPremaniplex"/>
 <Description>
 Returns one flag from each orbit under the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> FlagOrbitRepresentatives(Prism(Simplex(3)));
[ 1, 49, 97, 145 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="FlagOrbitsStabilizer" Label="for IsPremaniplex"/>
 <Returns>g
</Returns>
 <Description>
Returns the subgroup of the connection group that preserves the flag orbits under the action of the automorphism group.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m:=Prism(Dodecahedron());
Prism(Dodecahedron())
gap> s:=FlagOrbitsStabilizer(m);
<permutation group of size 207360000 with 12 generators>
gap> IsSubgroup(ConnectionGroup(m),s);
true
gap> AsSet(Orbit(AutomorphismGroupOnFlags(m),1))=AsSet(Orbit(s,1));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsReflexible" Label="for IsPremaniplex"/>
 <Returns>Whether the premaniplex <A>M</A> is reflexible (has one flag orbit).
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsReflexible(Epsilonk(6));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsChiral" Label="for IsPremaniplex"/>
 <Returns>Whether the premaniplex <A>M</A> is chiral.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsChiral(ToroidalMap44([2,3]));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsRotary" Label="for IsPremaniplex"/>
 <Returns>Whether the maniplex <A>M</A> is rotary; i.e., whether it is  either reflexible or chiral.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsRotary(ToroidalMap44([3,5]));
true
]]></Example>


<ManSection>
  <Attr Arg="M" Name="FlagOrbits" Label="for IsPremaniplex"/>
 <Description>
 Returns a list of lists of flags, representing the orbits of flags under the action of AutomorphismGroup(<A>M</A>).
 </Description>
</ManSection>


<Example><![CDATA[
gap> FlagOrbits(ToroidalMap44([3,2]));
[ [ 1, 9, 7, 33, 15, 63, 5, 65, 39, 23, 13, 71, 61, 101, 3, 89, 47, 37, 95, 21, 11, 79, 69, 29, 59, 77, 99, 51, 49, 55, 45, 35, 103, 93, 19, 83, 87, 67, 85, 27, 57, 75, 91, 97, 43, 81, 53, 31, 17, 25, 73, 41 ], 
  [ 2, 10, 8, 34, 16, 64, 6, 66, 40, 24, 14, 72, 62, 102, 4, 90, 48, 38, 96, 22, 12, 80, 70, 30, 60, 78, 100, 52, 50, 56, 46, 36, 104, 94, 20, 84, 88, 68, 86, 28, 58, 76, 92, 98, 44, 82, 54, 32, 18, 26, 74, 42 ] ]
]]></Example>


</Section>


</Chapter>

