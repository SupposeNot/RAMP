<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Posets">
<Heading>Posets</Heading>

<Section Label="Chapter_Posets_Section_Poset_attributes">
<Heading>Poset attributes</Heading>

 Posets have many properties we might be interested in. Here's a few.
<ManSection>
  <Attr Arg="poset" Name="MaximalChains" Label="for IsPoset"/>
 <Description>
Gives the list of maximal chains in a poset in terms of the elements of the poset. Synonyms are <Code>FlagsList</Code> and <Code>Flags</Code>.
 Tends to work faster (sometimes significantly) if the poset <Code>HasPartialOrder</Code>.
 </Description>
</ManSection>


 Synonym is <Code>FlagsList</Code>.
<Example><![CDATA[
gap> poset:=PosetFromManiplex(HemiCube(3));
A poset using the IsPosetOfFlags representation.
gap> MaximalChains(poset)[1];
[ An element of a poset made of flags, An element of a poset made of flags, 
  An element of a poset made of flags, An element of a poset made of flags, 
  An element of a poset made of flags ]
gap> List(last,x->RankInPoset(x,poset));
[ -1, 0, 1, 2, 3 ]
]]></Example>


<ManSection>
  <Attr Arg="poset" Name="RankPoset" Label="for IsPoset"/>
 <Description>
If the poset <Code>IsP1</Code>, ranks are assumed to run from <Math>-1</Math> to <Math>n</Math>, and function will return <Math>n</Math>. If <Code>IsP1(poset)=false</Code>, ranks are assumed to run from 1 to <Math>n</Math>.
 In RAMP, at least currently, we are assuming that graded/ranked posets are bounded. 
 Note that in general what you <Emph>actually</Emph> want to do is call <Code>Rank(poset)</Code>. The reason is that <Code>Rank</Code> will calculate the <Code>RankPoset</Code> if it isn't set, and then set and store the value in the poset.
 </Description>
</ManSection>


<ManSection Label="elements">
  <Attr Arg="poset" Name="ElementsList" Label="for IsPoset"/>
 <Description>
Will recover the list of faces of the poset, format may depend on <Emph>type</Emph> of representation of <Code>poset</Code>.
<List>
<Item>
We also have <Code>FacesList</Code> and <Code>Faces</Code> as synonyms for this command.
</Item>
</List>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="poset" Name="OrderingFunction" Label="for IsPoset"/>
 <Description>
<Code>OrderingFunction</Code> is an attribute of a poset which stores a function for ordering elements.
 </Description>
</ManSection>


<Example><![CDATA[
gap> p:=PosetFromManiplex(Cube(2));;
gap> p3:=PosetFromElements(RankedFaceListOfPoset(p),PairCompareFlagsList);;
gap> f3:=FacesList(p3);;
gap> OrderingFunction(p3)(ElementObject(f3[2]),ElementObject(f3[1]));
true
gap> OrderingFunction(p3)(ElementObject(f3[1]),ElementObject(f3[2]));
false
]]></Example>


<ManSection>
  <Prop Arg="poset" Name="IsFlaggable" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Checks or creates the value of the attribute <Code>IsFlaggable</Code> for an <Code>IsPoset</Code>. Point here is to see if the structure of the poset is sufficient to determine the flag graph. For IsPosetOfFlags this is another way of saying that the intersection of the faces (thought of as collections of flags) containing a flag is that selfsame flag. (Might be equivalent to prepolytopal... but Gabe was tired and Gordon hasn't bothered to think about it yet.)
 Now also works with generic poset element types (not just <Code>IsPosetOfFlags</Code>).
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="poset" Name="IsAtomic" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
This checks whether or not the faces of an IsP1 poset may be described uniquely in terms of the posets atoms.
<P/>
 The terminology as used here is approximately that of Ziegler's <Emph>Lectures on Polytopes</Emph> where a lattice is atomic if every element is the join of atoms.
 </Description>
</ManSection>


<Example><![CDATA[
gap> po:=BinaryRelationOnPoints([[2,3],[4,5],[4,5],[6],[6],[]]);;
gap> po:=ReflexiveClosureBinaryRelation(TransitiveClosureBinaryRelation(po));;
gap> p:=PosetFromPartialOrder(po);; IsAtomic(p);
false
gap> p2:=PosetFromManiplex(Cube(3));; IsAtomic(p2);
true
]]></Example>


<ManSection>
  <Attr Arg="poset" Name="PartialOrder" Label="for IsPoset"/>
 <Returns><Code>partial order</Code>
</Returns>
 <Description>
HasPartialOrder Checks if <A>poset</A> has a declared partial order (binary relation). SetPartialOrder assigns a partial order to the <A>poset</A>. In many cases, PartialOrder is able to compute one from structural information.
 </Description>
</ManSection>


<ManSection Label="Lattices">
<Heading>Lattices</Heading>
  <Prop Arg="poset" Name="IsLattice" Label="for IsPoset"/>
  <Prop Arg="arg" Name="IsAllMeets" Label="for IsPoset"/>
  <Prop Arg="arg" Name="IsAllJoins" Label="for IsPoset"/>
 <Returns>IsBool
</Returns>
 <Description>
IsLattice determines whether a poset is a lattice or not.
IsAllMeets determines whether all meets in a poset are unique.
IsAllJoins determines whether all joins in a poset are unique.
 </Description>
</ManSection>


<Example><![CDATA[
gap> poset:=PosetFromManiplex(Cube(3));;
gap> IsLattice(poset);
true
gap> bad:=PosetFromManiplex(HemiCube(3));;
gap> IsLattice(bad);
fail
]]></Example>


 Here's a simple example of when a lattice isn't atomic.
<Example><![CDATA[
gap> l:=[[2,3,4],[5,7],[5,6],[6,7],[8],[8],[8,9],[10],[10],[]];;
gap> b:=BinaryRelationOnPoints(l);; 
po:=ReflexiveClosureBinaryRelation(TransitiveClosureBinaryRelation(b));;
gap> poset:=PosetFromPartialOrder(po);;
gap> IsLattice(poset);
true
gap> IsAtomic(poset);
false
]]></Example>


<ManSection>
  <Oper Arg="list" Name="ListIsP1Poset" Label="for IsList"/>
 <Returns><Code>true</Code> or <Code>false</Code>
</Returns>
 <Description>
Given <A>list</A>, comprised of sublists of faces ordered by rank, each face listing the flags on the face, this function will tell you if the list corresponds to a P1 poset or not.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="poset" Name="IsP1" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Determines whether a poset has property P1 from ARP.
 </Description>
</ManSection>


<Example><![CDATA[
gap> p:=PosetFromElements(AllSubgroups(AlternatingGroup(4)),IsSubgroup);
A poset using the IsPosetOfIndices representation 
gap> IsP1(p);
true
gap> p2:=PosetFromFaceListOfFlags([[[1],[2]],[[1,2]]]);
A poset using the IsPosetOfFlags representation with 3 faces.
gap> IsP1(p2);
false
]]></Example>


<ManSection>
  <Prop Arg="poset" Name="IsP2" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Determines whether a poset has property P2 from ARP.
 </Description>
</ManSection>


<Example><![CDATA[
gap> poset:=PosetFromManiplex(HemiCube(3)); 
gap> IsP2(poset);
true
]]></Example>


 Another nice example
<Example><![CDATA[
gap> g:=AlternatingGroup(4);; a:=AllSubgroups(g);; poset:=PosetFromElements(a,IsSubgroup);
A poset using the IsPosetOfIndices representation 
gap> IsP2(poset);
false
]]></Example>


<ManSection>
  <Prop Arg="poset" Name="IsP3" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Determines whether a poset is strongly flag connected (property P3' from ARP). May also be called with command <Code>IsStronglyFlagConnected</Code>. If you are not working with a pre-polytope, expect this to take a LONG time.
 </Description>
</ManSection>


 Helper for IsP3
<ManSection>
  <Prop Arg="poset" Name="IsFlagConnected" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Determines whether a poset is flag connected.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="poset" Name="IsP4" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Determines whether a poset satisfies the diamond condition. May also be invoked using <Code>IsDiamondCondition</Code>.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="poset" Name="IsPolytope" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Determines whether a poset is an abstract polytope.
 </Description>
</ManSection>


<Example><![CDATA[
gap> poset:=PosetFromManiplex(Cube(3));
A poset using the IsPosetOfFlags representation with 28 faces.
gap> IsPolytope(poset);
true
gap> KnownPropertiesOfObject(poset);
[ "IsP1", "IsP2", "IsP3", "IsP4", "IsPolytope" ]
gap> poset2:=PosetFromElements(AllSubgroups(AlternatingGroup(4)),IsSubgroup);
A poset using the IsPosetOfIndices representation 
gap> IsPolytope(poset2);
false
gap> KnownPropertiesOfObject(poset2);
[ "IsP1", "IsP2", "IsPolytope" ]
]]></Example>


<ManSection>
  <Prop Arg="poset" Name="IsPrePolytope" Label="for IsPoset"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
Determines whether a poset is an abstract pre-polytope.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="poset" Name="IsSelfDual" Label="for IsPoset"/>
 <Returns>IsBool
</Returns>
 <Description>
Determines whether a poset is self dual.
 </Description>
</ManSection>


<Example><![CDATA[
gap> poset:=PosetFromManiplex(Simplex(5));;
A poset using the IsPosetOfFlags representation.
gap> IsSelfDual(poset);
true
gap> poset2:=PosetFromManiplex(PyramidOver(Cube(3)));;
gap> IsSelfDual(poset2);
false
]]></Example>


</Section>


<Section Label="Chapter_Posets_Section_Poset_constructors">
<Heading>Poset constructors</Heading>

 I'm in the process of reconciling all of this, but there are going to be a number of ways to <Code>define</Code> a poset:
<List>
<Item>
As an <Code>IsPosetOfFlags</Code>, where the underlying description is an ordered list of length <Math>n+2</Math>. Each of the <Math>n+2</Math> list elements is a list of faces, and the assumption is that these are the faces of rank <Math>i-2</Math>, where <Math>i</Math> is the index in the master list (e.g., <Code>l[1][1]</Code> would usually correspond to the unique <Math>-1</Math> face of a polytope -- and there won't be an <Code>l[1][2]</Code>). Each face is then a list of the flags incident with that face.
</Item>
<Item>
As an <Code>IsPosetOfIndices</Code>, where the underlying description is a binary relation on a set of indices, which correspond to labels for the elements of the poset.
</Item>
<Item>
If the poset is known to be atomic, then by a description of the faces in terms of the atoms... usually we'll just need the list of the elements of maximal rank, from which all other elements may be obtained.
</Item>
<Item>
As an <Code>IsPosetOfElements</Code>, where the elements could be anything, and we have a known function determining the partial order on the elements.
</Item>
</List>
 Usually, we assume that the poset will have a natural rank function on it. More information on the poset attributes that are important in the study of abstract polytopes and maniplexes is available in <Cite Key="McMSch02"/>, <Cite Key="MonPelWil14"/>, and <Cite Key="Wil12"/>.
<ManSection>
  <Oper Arg="list" Name="PosetFromFaceListOfFlags" Label="for IsList"/>
 <Returns><Code>IsPosetOfFlags</Code>.
</Returns>
 <Description>
Given a <A>list</A> of lists of faces in increasing rank, where each face is described by the incident flags, gives you a IsPosetOfFlags object back.
 Posets constructed this way are assumed to be IsP1 and IsP2.
 </Description>
</ManSection>


 Here we have a poset using the <Code>IsPosetOfFlags</Code> description for the triangle.
<Example><![CDATA[
gap> poset:=PosetFromFaceListOfFlags([[[1,2,3,4,5,6]],[[1,2],[3,6],[4,5]],[[1,4],[2,3],[5,6]],[[1,2,3,4,5,6]]]);
A poset using the IsPosetOfFlags representation with 8 faces.
gap> FaceListOfPoset(poset);
[ [ [ 1, 2, 3, 4, 5, 6 ] ], [ [ 1, 2 ], [ 3, 6 ], [ 4, 5 ] ], [ [ 1, 4 ], [ 2, 3 ], [ 5, 6 ] ], [ [ 1, 2, 3, 4, 5, 6 ] ] ]
]]></Example>


<ManSection>
  <Oper Arg="g" Name="PosetFromConnectionGroup" Label="for IsPermGroup"/>
 <Returns><Code>IsPosetOfFlags</Code> with <Code>IsP1</Code>=true.
</Returns>
 <Description>
Given a group, returns a poset with an internal representation as a list of faces ordered by rank, where each face is represented as a list of the flags it contains. Note that this function includes the minimal (empty) face and the maximal face of the maniplex. Note that the <Math>i</Math>-faces correspond to the <Math>i+1</Math> item in the list because of how GAP indexes lists.
 </Description>
</ManSection>


<Example><![CDATA[
gap> g:=Group([(1,4)(2,3)(5,6),(1,2)(3,6)(4,5)]);
Group([ (1,4)(2,3)(5,6), (1,2)(3,6)(4,5) ])
gap> PosetFromConnectionGroup(g);
A poset using the IsPosetOfFlags representation with 8 faces.
]]></Example>


<ManSection>
  <Oper Arg="mani" Name="PosetFromManiplex" Label="for IsManiplex"/>
 <Returns><Code>IsPosetOfFlags</Code>
</Returns>
 <Description>
Given a maniplex, returns a poset of the maniplex with an internal representation as a list of faces ordered by rank, where each face is represented as a list of the flags it contains. Note that this function does include the minimal (empty) face and the maximal face of the maniplex. Note that the <Math>i</Math>-faces correspond to the <Math>i+1</Math> item in the list because of how GAP indexes lists.
 </Description>
</ManSection>


<Example><![CDATA[
gap> p:=HemiCube(3);
Regular 3-polytope of type [ 4, 3 ] with 24 flags
gap> PosetFromManiplex(p);
A poset using the IsPosetOfFlags representation with 15 faces.
]]></Example>


<ManSection>
  <Oper Arg="partialOrder" Name="PosetFromPartialOrder" Label="for IsBinaryRelation"/>
 <Returns><Code>IsPosetOfIndices</Code>
</Returns>
 <Description>
Given a partial order on a finite set of size <Math>n</Math>, this function will create a partial order on <Code>[1..n]</Code>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> l:=List([[1,1],[1,2],[1,3],[1,4],[2,4],[2,2],[3,3],[4,4]],x->Tuple(x));
gap> r:=BinaryRelationByElements(Domain([1..4]), l);
<general mapping: Domain([ 1 .. 4 ]) -> Domain([ 1 .. 4 ]) >
gap> poset:=PosetFromPartialOrder(r);
A poset using the IsPosetOfIndices representation 
gap> h:=HasseDiagramBinaryRelation(PartialOrder(poset));
<general mapping: Domain([ 1 .. 4 ]) -> Domain([ 1 .. 4 ]) >
gap> Successors(h);
[ [ 2, 3 ], [ 4 ], [  ], [  ] ]
]]></Example>


 Note that what we've accomplished here is the poset containing the elements 1, 2, 3, 4 with partial order determined by whether the first element divides the second. The essential information about the poset can be obtained from the Hasse diagram.
<ManSection>
  <Oper Arg="list" Name="PosetFromAtomicList" Label="for IsList"/>
 <Returns><Code>IsPosetOfAtoms</Code>
</Returns>
 <Description>
Given a list of elements, where each element is given as a list of atoms, this function will construct the corresponding poset. Note that this will construct any implied faces as well (i.e., all possible intersections of the listed faces).
 </Description>
</ManSection>


<Example><![CDATA[
gap> list:=[[1,2,3],[1,2,4],[1,3,4],[2,3,4]];
[ [ 1, 2, 3 ], [ 1, 2, 4 ], [ 1, 3, 4 ], [ 2, 3, 4 ] ]
gap> poset:=PosetFromAtomicList(list);;
gap> List(Faces(poset),AtomList);
[ [  ], [ 1 ], [ 1, 2 ], [ 1, 2, 3 ], [ 1, 2, 4 ], [ 1, 3 ], [ 1, 3, 4 ], [ 1, 4 ], [ 2 ], [ 2, 3 ], 
  [ 2, 3, 4 ], [ 2, 4 ], [ 3 ], [ 3, 4 ], [ 4 ], [ 1 .. 4 ] ]
]]></Example>


<ManSection>
  <Oper Arg="list_of_faces, func" Name="PosetFromElements" Label="for IsList,IsFunction"/>
 <Returns><Code>IsPosetOfElements</Code>
</Returns>
 <Description>
This is for gathering elements with a known ordering <A>func</A> on two variables into a poset. Also note, the expectation is that <A>func</A> behaves similarly to IsSubset, i.e., <A>func</A> (x,y)=true means <Math>y</Math> is less than <Math>x</Math> in the order.
 </Description>
</ManSection>


<Example><![CDATA[
gap>  g:=SymmetricGroup(3);
Sym( [ 1 .. 3 ] )
gap> asg:=AllSubgroups(g);
[ Group(()), Group([ (2,3) ]), Group([ (1,2) ]), Group([ (1,3) ]), Group([ (1,2,3) ]),   Group([ (1,2,3), (2,3) ]) ]
gap> poset:=PosetFromElements(asg,IsSubgroup);
A poset on 6 elements using the IsPosetOfIndices representation.
gap> HasseDiagramBinaryRelation(PartialOrder(poset));
<general mapping: Domain([ 1 .. 6 ]) -> Domain([ 1 .. 6 ]) >
gap> Successors(last);
[ [ 2, 3, 4, 5 ], [ 6 ], [ 6 ], [ 6 ], [ 6 ], [  ] ]
gap> List( ElementsList(poset){[2,6]}, ElementObject);
[ Group([ (2,3) ]), Group([ (1,2,3), (2,3) ]) ]
]]></Example>


<ManSection>
  <Oper Arg="successorsList" Name="PosetFromSuccessorList" Label="for IsList"/>
 <Returns>poset
</Returns>
 <Description>
Given a list of immediate successors, will construct the poset. A valid list of successors is of the form <Code>[[2,3],[3],[]]</Code> where the <Math>i</Math>-th entry is a list of elements that are greater than the <Math>i</Math>-th element in the partial order that determines the poset. If the given list isn't reflexive and transitive, this function will induce those properties from the given list of successors.
 </Description>
</ManSection>


<Example><![CDATA[
gap> p:=PosetFromManiplex(HemiCube(3));;
gap> Print(p);
PosetFromSuccessorList([ [ 2, 3, 4, 5 ], [ 6, 7, 9 ], [ 6, 8, 11 ], [ 7, 10, 11 ], 
[ 8, 9, 10 ], [ 1, 2, 13 ], [ 12, 14 ], [ 12, 14 ], [ 13, 14 ], [ 12, 13 ], [ 13, 14 ], 
[ 15 ], [ 15 ], [ 15 ], [ ] ]);
]]></Example>


<ManSection Label="Helper_functions">
<Heading>Helper functions for special partial orders</Heading>
  <Oper Arg="list1, list2" Name="PairCompareFlagsList" Label="for IsList,IsList"/>
  <Oper Arg="list1, list2" Name="PairCompareAtomsList" Label="for IsList,IsList"/>
 <Returns><Code>true</Code> or <Code>false</Code>
</Returns>
 <Description>
 The functions PairCompareFlagsList and PairCompareAtomsList are used in poset construction.
Function assumes <A>list1</A> and <A>list2</A> are of the form [<Code>listOfFlags</Code>,<Code>i</Code>] where <Code>listOfFlags</Code> is a list of flags in the face and <Code>i</Code> is the rank of the face. Allows comparison of HasFlagList elements.
Function assumes <A>list1</A> and <A>list2</A> are of the form <Code>[listOfAtoms,int]</Code> where <Code>listOfAtoms</Code> is a list of flags in the face and <Code>int</Code> is the rank of the face. Allows comparison of HasAtomList elements.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset" Name="DualPoset" Label="for IsPoset"/>
 <Returns>dual
</Returns>
 <Description>
Given a <A>poset</A>, will construct a poset isomorphic to the dual of <A>poset</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> p:=PosetFromManiplex(Cube(3));; c:=PosetFromManiplex(CrossPolytope(3));;
gap> IsIsomorphicPoset(DualPoset(DualPoset(p)),p);
true
gap> IsIsomorphicPoset(DualPoset(p),c);
true
gap> IsIsomorphicPoset(DualPoset(p),p);
false
]]></Example>


<ManSection>
  <Oper Arg="face1, face2, poset" Name="Section" Label="for IsFace, IsFace, IsPoset"/>
 <Returns>section
</Returns>
 <Description>
Constructs the section of the <A>poset</A> <A>face1</A><Math>/</Math><A>face2</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> poset:=PosetFromManiplex(PyramidOver(Cube(2)));;
gap> faces:=Faces(poset);;List(faces,x->RankInPoset(x,poset));
[ -1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3 ]
gap> IsIsomorphicPoset(Section(faces[15],faces[1],poset),PosetFromManiplex(Simplex(2)));
true
gap> IsIsomorphicPoset(Section(faces[16],faces[1],poset),PosetFromManiplex(Cube(2)));
true
gap> IsIsomorphicPoset(Section(faces[20],faces[2],poset),PosetFromManiplex(Cube(2)));
true
]]></Example>


<ManSection Label="Cleaving">
<Heading>Cleaving polytopes</Heading>
  <Oper Arg="polytope, k" Name="Cleave" Label="for IsPoset,IsInt"/>
  <Oper Arg="arg1,arg2" Name="PartiallyCleave" Label="for IsPoset,IsInt"/>
 <Returns>cleavedPolytope
</Returns>
 <Description>
Given a <A>polytope</A> <Math>\mathcal P</Math>, and an integer <A>k</A>, <Code>Cleave(polytope,k)</Code> will construct the <Math>k^{th}</Math>-cleaved polytope of <Math>\mathcal P</Math>. Cleaved polytopes were introduced by Daniel Pellicer <Cite Key="Pel18"/> (<URL>https://doi.org/10.1007/s00493-016-3518-3</URL>).
Given a <A>polytope</A> <Math>\mathcal P</Math>, and an integer <A>k</A>, <Code>PartiallyCleave(polytope,k)</Code> will construct the <Math>k^{th}</Math>-partially cleaved polytope of <Math>\mathcal P</Math>.
 </Description>
</ManSection>


<P/>
</Section>



<Section Label="Chapter_Posets_Section_Element_Constructors">
<Heading>Element Constructors</Heading>

<ManSection>
  <Oper Arg="obj, func" Name="PosetElementWithOrder" Label="for IsObject,IsFunction"/>
 <Returns><Code>IsFace</Code>
</Returns>
 <Description>
Creates a <Code>face</Code> with <A>obj</A> and ordering function <Code>func</Code>. Note that by convetiontion <Code>func(a,b)</Code> should return true when <Math>b\le a</Math>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="list, poset, n" Name="PosetElementFromListOfFlags" Label="for IsList,IsPoset,IsInt"/>
 <Returns><Code>IsPosetElement</Code>
</Returns>
 <Description>
This is used to create a face of rank <A>n</A> from a <A>list</A> of flags of <A>poset</A>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="list" Name="PosetElementFromAtomList" Label="for IsList"/>
 <Returns><Code>IsFace</Code>
</Returns>
 <Description>
Creates a <Code>face</Code> with <A>list</A> of atoms. If you wish to assign ranks or membership in a poset, you must do this separately.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="obj" Name="PosetElementFromIndex" Label="for IsObject"/>
 <Returns><Code>IsFace</Code>
</Returns>
 <Description>
Creates a <Code>face</Code> with index <A>obj</A> at rank <A>n</A>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="obj, order" Name="PosetElementWithPartialOrder" Label="for IsObject, IsBinaryRelation"/>
 <Returns><Code>IsFace</Code>
</Returns>
 <Description>
Creates a <Code>face</Code> with index <A>obj</A> and BinaryRelation <A>order</A> on <A>obj</A>. Function does not check to make sure <A>order</A> has <A>obj</A> in its domain.
 </Description>
</ManSection>



<ManSection>
  <Attr Arg="posetelement" Name="RanksInPosets" Label="for IsPosetElement"/>
 <Returns>list
</Returns>
 <Description>
Gives the <Code>list</Code> of posets <A>posetelement</A> is in, and the corresponding rank (if available) as a list of ordered pairs of the form <Code>[poset,rank]</Code>. #!
 Note that this attribute is mutable, so if you modify it you may break things.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="posetelement, poset, int" Name="AddRanksInPosets" Label="for IsPosetElement,IsPoset,IsInt"/>
 <Returns>null
</Returns>
 <Description>
Adds an entry in the list of RanksInPosets for <A>posetelement</A> corresponding to <A>poset</A> with assigned rank <A>int</A>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="posetelement {face}" Name="FlagList" Label="for IsPosetElement"/>
 <Returns><Code>list</Code>
</Returns>
 <Description>
Description of <A>posetelement</A> n as a list of incident flags (when present).
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="posetelement {face}" Name="AtomList" Label="for IsPosetElement"/>
 <Returns><Code>list</Code>
</Returns>
 <Description>
Description of <A>posetelement</A> n as a list of atoms (when present).
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Posets_Section_Element_operations">
<Heading>Element operations</Heading>

<ManSection>
  <Oper Arg="[face,poset]" Name="RankInPoset" Label="for IsPosetElement,IsPoset"/>
 <Returns><Code>IsInt</Code>
</Returns>
 <Description>
Given an element <A>face</A> and a poset <A>poset</A> to which it belongs, will give you the rank of <A>face</A> in <A>poset</A>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="[face1,face2,poset]" Name="IsSubface" Label="for IsFace,IsFace,IsPoset"/>
 <Returns><Code>true</Code> or <Code>false</Code>
</Returns>
 <Description>
<A>face1</A> and <A>face2</A> are IsFace or IsPosetElement. IsSubface will check to see if <A>face2</A> is a subface of <A>face1</A> in <A>poset</A>. You may drop the argument <A>poset</A> if the faces only belong to one poset in common.
 Warning: if the elements are made up of atoms, then IsSubface doesn't need to know what poset you are working with.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="arg1,arg2,arg3" Name="IsEqualFaces" Label="for IsFace, IsFace, IsPoset"/>
 <Description>
Determines whether two faces are equal in a poset. Note that <Code>\=</Code> tests whether they are the identical object or not.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="object1, object2" Name="AreIncidentElements" Label="for IsObject,IsObject"/>
 <Returns><Code>true</Code> or <Code>false</Code>
</Returns>
 <Description>
Given two poset elements, will tell you if they are incident.
<List>
<Item>
Synonym function: <Code>AreIncidentFaces</Code>.
</Item>
</List>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="face1, face2, poset" Name="Meet" Label="for IsFace, IsFace, IsPoset"/>
 <Returns>meet
</Returns>
 <Description>
Finds (when possible) the meet of two elements in a poset.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="face1, face2, poset" Name="Join" Label="for IsFace, IsFace, IsPoset"/>
 <Returns>meet
</Returns>
 <Description>
Finds (when possible) the join of two elements in a poset.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Posets_Section_Working_with_posets">
<Heading>Working with posets</Heading>

<ManSection>
  <Oper Arg="poset1, poset2" Name="IsIsomorphicPoset" Label="for IsPoset,IsPoset"/>
 <Returns><Code>true</Code> or <Code>false</Code>
</Returns>
 <Description>
Determines whether <A>poset1</A> and <A>poset2</A> are isomorphic by checking to see if their Hasse diagrams are isomorphic.
 </Description>
</ManSection>


<Example><![CDATA[
gap>  IsIsomorphicPoset( PosetFromManiplex( PyramidOver( Cube(3) ) ),  PosetFromManiplex( PrismOver (PyramidOver( Cube(2) ) ) ) );
false
gap>  IsIsomorphicPoset( PosetFromManiplex( PyramidOver( Cube(3) ) ), PosetFromManiplex( PyramidOver( PrismOver( Cube(2) ) ) ) );
true
]]></Example>


<ManSection>
  <Oper Arg="poset1, poset2" Name="PosetIsomorphism" Label="for IsPoset,IsPoset"/>
 <Returns>map on face indices
</Returns>
 <Description>
When <A>poset1</A> and <A>poset2</A> are isomorphic, will give you a map from the faces of <A>poset1</A> to the faces of <A>poset2</A>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset" Name="FlagsAsFlagListFaces" Label="for IsPoset"/>
 <Returns><Code>IsList</Code>
</Returns>
 <Description>
Given a <A>poset</A>, this will give you a version of the list of flags in terms of the proper faces described in the <A>poset</A>; i.e., this gives a list of flags where each face is described in terms of its (enumerated) list of incident flags. Note that the flag list does not include the minimal face or the maximal face if the poset IsP2.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="IsPosetOfFlags" Name="RankedFaceListOfPoset" Label="for IsPoset"/>
 <Returns><Code>list</Code>
</Returns>
 <Description>
Gives a list of [<A>face</A>,<A>rank</A>] pairs for all the faces of <A>poset</A>. Assumptions here are that faces are lists of incident flags.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset, flag, i" Name="AdjacentFlag" Label="for IsPosetOfFlags,IsList,IsInt"/>
 <Returns><Code>flag(s)</Code>
</Returns>
 <Description>
Given a poset, a flag, and a rank, this function will give you the <A>i</A>-adjacent flag. Note that adjacencies are listed from ranks 0 to one less than the dimension.
 You can replace <A>flag</A> with the integer corresponding to that flag.
 Appending <Code>true</Code> to the arguments will give the position of the flag instead of its description from <Code>FlagsAsFlagListFaces</Code>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset, flagaslistoffaces, adjacencyrank" Name="AdjacentFlags" Label="for IsPoset,IsList,IsInt"/>
 <Description>
If your poset isn't P4, there may be multiple adjacent maximal chains at a given rank. This function handles that case. May substitute <Code>IsInt</Code> for <Code>flagaslistoffaces</Code> corresponding to position of <Code>flag</Code> in list of maximal chains.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="flag1, flag2" Name="EqualChains" Label="for IsList,IsList"/>
 <Description>
Determines whether two chains are equal.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset, i" Name="ConnectionGeneratorOfPoset" Label="for IsPoset,IsInt"/>
 <Returns>A permutation on the flags.
</Returns>
 <Description>
Given a <A>poset</A> and an integer <Math>i</Math>, this function will give you the associated permutation for the rank <Math>i</Math>-connection.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="poset" Name="ConnectionGroup" Label="for IsPoset"/>
 <Returns><Code>IsPermGroup</Code>
</Returns>
 <Description>
Given a <A>poset</A> that is <Code>IsPrePolytope</Code>, this function will give you the connection group.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="poset" Name="AutomorphismGroup" Label="for IsPoset"/>
 <Description>
Given a <A>poset</A>, gives the automorphism group of the poset as an action on the maximal chains.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="poset" Name="AutomorphismGroupOnElements" Label="for IsPoset"/>
 <Description>
Given a <A>poset</A>, gives the automorphism group of the poset as an action on the elements.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset" Name="FaceListOfPoset" Label="for IsPoset"/>
 <Returns><Code>list</Code>
</Returns>
 <Description>
Gives a list of faces collected into lists ordered by increasing rank. Suitable as input for <Code>PosetFromFaceListOfFlags</Code>. Argument must be IsPosetOfFlags.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset" Name="RankPosetElements" Label="for IsPoset"/>
 <Description>
Assigns to each face of a poset (when possible) the rank of the element in the poset.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset" Name="FacesByRankOfPoset" Label="for IsPoset"/>
 <Returns><Code>list</Code>
</Returns>
 <Description>
Gives lists of faces ordered by rank. Also sets the rank for each of the faces.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset" Name="HasseDiagramOfPoset" Label="for IsPoset"/>
 <Returns>directed graph
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="poset" Name="AsPosetOfAtoms" Label="for IsPoset"/>
 <Returns>posetFromAtoms
</Returns>
 <Description>
If <A>poset</A> is an IsP1 poset admits a description of its elements in terms of its atoms, this function will construct an isomorphic poset whose faces are described using PosetFromAtomList.
 </Description>
</ManSection>


<Example><![CDATA[
gap> poset:=PosetFromManiplex(Cube(2));;
gap> p2:=AsPosetOfAtoms(poset);
A poset on 10 elements using the IsPosetOfIndices representation.
gap> IsIsomorphicPoset(poset,p2);
true
]]></Example>


<ManSection Label="Special_Faces">
<Heading>Max/min faces</Heading>
  <Oper Arg="poset" Name="MinFace" Label="for IsPoset"/>
  <Oper Arg="arg" Name="MaxFace" Label="for IsPoset"/>
 <Returns>face
</Returns>
 <Description>
Gives the minimal/maximal face of a <A>poset</A> when it IsP1 and IsP2.
<P/>
 </Description>
</ManSection>


</Section>


</Chapter>

