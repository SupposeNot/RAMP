<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Combinatorics_and_Structure">
<Heading>Combinatorial Structure of Maniplexes</Heading>

<Section Label="Chapter_Combinatorics_and_Structure_Section_Basics">
<Heading>Basics</Heading>

<ManSection>
  <Attr Arg="M" Name="Size" Label="for IsPremaniplex"/>
 <Returns>The number of flags of the premaniplex <A>M</A>.
</Returns>
 <Description>
Synonym: <Code>NumberOfFlags</Code>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="M" Name="RankManiplex" Label="for IsPremaniplex"/>
 <Returns>The rank of the premaniplex <A>M</A>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Combinatorics_and_Structure_Section_Faces">
<Heading>Faces</Heading>

<ManSection>
  <Oper Arg="M, i" Name="NumberOfIFaces" Label="for IsManiplex, IsInt"/>
 <Description>
 Returns The number of <A>i</A>-faces of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfIFaces(Dodecahedron(),1);
30
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfVertices" Label="for IsManiplex"/>
 <Description>
 Returns the number of vertices of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfVertices(HemiDodecahedron());
10
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfEdges" Label="for IsManiplex"/>
 <Description>
 Returns the number of edges of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfEdges(HemiIcosahedron());
15
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfFacets" Label="for IsManiplex"/>
 <Description>
 Returns the number of facets of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfFacets(Bk2l(4,6));
4
]]></Example>


<ManSection>
  <Attr Arg="M" Name="NumberOfRidges" Label="for IsManiplex"/>
 <Description>
 Returns the number of ridges ((n-2)-faces) of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> NumberOfRidges(CrossPolytope(5));
80
]]></Example>


<ManSection>
  <Attr Arg="M" Name="Fvector" Label="for IsManiplex"/>
 <Description>
 Returns the f-vector of <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Fvector(HemiIcosahedron());
[ 6, 15, 10 ]
]]></Example>


<ManSection Label="Sections">
<Heading>Section(s)</Heading>
  <Oper Arg="M, j, i" Name="Section" Label="for IsManiplex, IsInt, IsInt"/>
  <Oper Arg="M, j, i, k" Name="Section" Label="for IsManiplex, IsInt, IsInt, IsInt"/>
  <Oper Arg="M, j, i" Name="Sections" Label="for IsManiplex, IsInt, IsInt"/>
 <Description>
 <Code>Section(M,j,i)</Code> returns the section <Code>F_j / F_i</Code>, where <Code>F_j</Code> is the <Math>j</Math>-face of the base flag of <A>M</A> and
 <Code>F_i</Code> is the <Math>i</Math>-face of the base flag.
 <Code>Section(M,j,i,k)</Code> returns the section <Code>F_j / F_i</Code>, where <Code>F_j</Code> is the <Math>j</Math>-face of flag number <A>k</A> of <A>M</A> and
 <Code>F_i</Code> is the <Math>i</Math>-face of the same flag.
 <Code>Sections(M,j,i)</Code> returns all sections of type <Code>F_j / F_i</Code>, where <Code>F_j</Code> is a <Math>j</Math>-face and <Code>F_i</Code> is an incident <Math>i</Math>-face.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Section(ToroidalMap44([2,2]),3,0);
Pgon(4)
gap> Section(Cuboctahedron(),2,-1,1);
Pgon(4)
gap> Section(Cuboctahedron(),2,-1,4);
Pgon(3)
gap> Sections(Cuboctahedron(),2,-1);
[ Pgon(4), Pgon(3) ]
]]></Example>


<ManSection Label="Facet">
<Heading>Facet(s)</Heading>
  <Attr Arg="M" Name="Facets" Label="for IsManiplex"/>
  <Oper Arg="M, k" Name="Facet" Label="for IsManiplex, IsInt"/>
  <Attr Arg="M" Name="Facet" Label="for IsManiplex"/>
 <Description>
 Returns the facet-types of <A>M</A> (i.e. the maniplexes corresponding to the facets).
 Returns the facet of <A>M</A> that contains the flag number <A>k</A> (that is, the maniplex corresponding to the facet).
 Returns the facet of <A>M</A> that contains flag number 1 (that is, the maniplex corresponding to the facet).
 </Description>
</ManSection>


<Example><![CDATA[
gap> Facets(Cuboctahedron());
[ Pgon(4), Pgon(3) ]
gap> Facet(Cuboctahedron(),4);
Pgon(3)
gap> Facet(Cuboctahedron());
Pgon(4)
]]></Example>


<ManSection Label="VertexFigure">
<Heading>Vertex Figure(s)</Heading>
  <Attr Arg="M" Name="VertexFigures" Label="for IsManiplex"/>
  <Oper Arg="M, k" Name="VertexFigure" Label="for IsManiplex, IsInt"/>
  <Attr Arg="M" Name="VertexFigure" Label="for IsManiplex"/>
 <Description>
 Returns the types of vertex-figures of <A>M</A> (i.e. the maniplexes corresponding to the vertex-figures).
 Returns the vertex-figure of <A>M</A> that contains flag number <A>k</A>.
 Returns the vertex-figure of <A>M</A> that contains the base flag.
 </Description>
</ManSection>


<Example><![CDATA[
gap> p:=Dual(SmallRhombicosidodecahedron());
Dual(3-maniplex)
gap> VertexFigures(p);
[ Pgon(5), Pgon(4), Pgon(3) ]
gap> VertexFigure(p,4);
Pgon(4)
gap> VertexFigure(p);
Pgon(5)
]]></Example>


<ManSection>
  <Attr Arg="M" Name="VertDegrees" Label="for IsManiplex"/>
 <Returns>IsList
</Returns>
 <Description>
Returns a list that describes how many vertices <A>M</A> has of each valency.
 This list has the form [ [v1, n1], [v2, n2], ...] to indicate that there are n1 vertices of valcency v1, etc.
 </Description>
</ManSection>


<Example><![CDATA[
gap> VertDegrees(Pyramid(5));
[ [3, 5], [5, 1] ];
gap> VertDegrees(Kis(Cube(3)));
[ [4, 6], [6, 8] ];
gap> VertDegrees(Prism(5));
[ [3, 10] ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="FaceSizes" Label="for IsManiplex"/>
 <Returns>IsList
</Returns>
 <Description>
Returns a list that describes how many 2-faces <A>M</A> has of each size.
 This list has the form [ [f1, n1], [f2, n2], ...] to indicate that there are n1 f1-gonal faces, etc.
 </Description>
</ManSection>


<Example><![CDATA[
gap> FaceSizes(Cube(3));
[ [ 4, 6 ] ]
gap> FaceSizes(Cube(4));
[ [ 4, 24 ] ]
gap> FaceSizes(Prism(Dodecahedron()));
[ [ 4, 30 ], [ 5, 24 ] ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="FacetList" Label="for IsManiplex"/>
 <Returns>list
</Returns>
 <Description>
Lists the facets of the maniplex <A>M</A> as lists of flags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m:=Cuboctahedron();
3-maniplex
gap> FacetList(m);
[ [ 1, 2, 3, 5, 7, 10, 13, 18 ], [ 4, 6, 9, 12, 16, 21 ], [ 8, 14, 15, 24, 25, 34 ], 
[ 11, 19, 20, 29, 30, 39 ], [ 17, 26, 27, 36, 37, 46, 47, 57 ], [ 22, 31, 32, 41, 42, 52, 53, 62 ],
[ 23, 28, 33, 38, 43, 49 ], [ 35, 44, 45, 55, 56, 65, 66, 75 ], 
[ 40, 50, 51, 60, 61, 70, 71, 80 ], [ 48, 54, 59, 64, 69, 74 ], [ 58, 67, 68, 77, 78, 86 ], 
[ 63, 72, 73, 82, 83, 89 ], [ 76, 81, 85, 88, 91, 93 ], [ 79, 84, 87, 90, 92, 94, 95, 96 ] ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="VertexList" Label="for IsManiplex"/>
 <Returns>list
</Returns>
 <Description>
Lists the vertices of the maniplex <A>M</A> as lists of flags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m:=Cuboctahedron();
3-maniplex
gap> VertexList(m);
[ [ 1, 3, 4, 8, 9, 15, 17, 26 ], [ 2, 5, 6, 11, 12, 20, 22, 31 ], [ 7, 13, 14, 23, 24, 33, 35, 44 ],
  [ 10, 18, 19, 28, 29, 38, 40, 50 ], [ 16, 21, 27, 32, 37, 42, 48, 54 ], 
  [ 25, 34, 36, 45, 46, 56, 58, 67 ], [ 30, 39, 41, 51, 52, 61, 63, 72 ], 
  [ 43, 49, 55, 60, 65, 70, 76, 81 ], [ 47, 57, 59, 68, 69, 78, 79, 87 ], 
  [ 53, 62, 64, 73, 74, 83, 84, 90 ], [ 66, 75, 77, 85, 86, 91, 92, 95 ], 
  [ 71, 80, 82, 88, 89, 93, 94, 96 ] ]
]]></Example>


<ManSection>
  <Oper Arg="M,n" Name="NFacesList" Label="for IsManiplex,IsInt"/>
 <Returns>list
</Returns>
 <Description>
Lists the <A>n</A>-faces of the maniplex <A>M</A> as lists of flags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> m:=Cuboctahedron();
3-maniplex
gap> NFacesList(m);
gap> m:=Cuboctahedron();
3-maniplex
gap> NFacesList(m,2)=FacetList(m);
true
gap> NFacesList(m,1);
[ [ 1, 2, 4, 6 ], [ 3, 7, 8, 14 ], [ 5, 10, 11, 19 ], [ 9, 16, 17, 27 ], [ 12, 21, 22, 32 ], 
  [ 13, 18, 23, 28 ], [ 15, 25, 26, 36 ], [ 20, 30, 31, 41 ], [ 24, 34, 35, 45 ], 
  [ 29, 39, 40, 51 ], [ 33, 43, 44, 55 ], [ 37, 47, 48, 59 ], [ 38, 49, 50, 60 ], 
  [ 42, 53, 54, 64 ], [ 46, 57, 58, 68 ], [ 52, 62, 63, 73 ], [ 56, 66, 67, 77 ], 
  [ 61, 71, 72, 82 ], [ 65, 75, 76, 85 ], [ 69, 74, 79, 84 ], [ 70, 80, 81, 88 ], 
  [ 78, 86, 87, 92 ], [ 83, 89, 90, 94 ], [ 91, 93, 95, 96 ] ]
]]></Example>


</Section>


<Section Label="Chapter_Combinatorics_and_Structure_Section_Flatness">
<Heading>Flatness</Heading>

<ManSection Label="IsFlat">
<Heading>Flatness</Heading>
  <Prop Arg="M" Name="IsFlat" Label="for IsManiplex"/>
  <Oper Arg="M, i, j" Name="IsFlat" Label="for IsManiplex, IsInt, IsInt"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
 In the first form, returns true if every vertex of the maniplex <A>M</A> is incident
 to every facet.
 In the second form, returns true if every i-face of the maniplex <A>M</A> is
 incident to every j-face.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFlat(HemiCube(3));
true
gap> IsFlat(Simplex(3),0,2);
false
]]></Example>


</Section>


<Section Label="Chapter_Combinatorics_and_Structure_Section_Schlafli_symbol">
<Heading>Schlafli symbol</Heading>

<ManSection>
  <Attr Arg="M" Name="SchlafliSymbol" Label="for IsManiplex"/>
 <Description>
 Returns the Schlafli symbol of the maniplex <A>M</A>.
 Each entry is either an integer or a set of integers,
 where entry number i shows the polygons that we obtain
 as sections of (i+1)-faces over (i-2)-faces.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(SmallRhombicosidodecahedron());
[ [ 3, 4, 5 ], 4 ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="PseudoSchlafliSymbol" Label="for IsManiplex"/>
 <Description>
 Sometimes when we make a maniplex, we know that the
 Schlafli symbol must be a quotient of some symbol.
 This most frequently happens because we start with a
 maniplex with a given Schlafli symbol and then take a
 quotient of it. In this case, we store the given
 Schlafli symbol and call it a <Emph>pseudo-Schlafli symbol</Emph>
 of <A>M</A>. Note that whenever we compute the actual
 Schlafli symbol of <A>M</A>, we update the pseudo-Schlafli
 symbol to match.
 </Description>
</ManSection>


<Example><![CDATA[
gap> M := ReflexibleManiplex([4,4], "(r0 r1)^2");;
gap> PseudoSchlafliSymbol(M);
[4, 4]
gap> SchlafliSymbol(M);
[2, 4]
gap> PseudoSchlafliSymbol(M);
[2, 4]
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsEquivelar" Label="for IsManiplex"/>
 <Returns>the the maniplex <A>M</A> is equivelar; i.e.,  whether its Schlafli Symbol consists of integers at each
  position (no lists).
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsEquivelar(Bk2l(6,18));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsDegenerate" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
 Returns whether the maniplex <A>M</A> has any sections that
 are digons. We may eventually want to include maniplexes with
 even smaller sections.
 </Description>
</ManSection>


<Example><![CDATA[
gap> F := FreeGroup("s0","s1","s2","s3");;
gap> s0 := F.1;;  s1 := F.2;;  s2 := F.3;;  s3 := F.4;;  
gap> rels := [ s0*s0, s1*s1, s2*s2, s3*s3, s0*s2*s0*s2, 
> s1*s2*s1*s2, s0*s3*s0*s3, s1*s3*s1*s3, 
> s2*s3*s2*s3*s2*s3*s2*s3, s0*s1*s0*s1*s0*s1*s0*s1*s0*s1 ];;
gap> poly := F / rels;;
gap> IsDegenerate(ARP(poly));
true
]]></Example>


<ManSection>
  <Prop Arg="P" Name="IsTight" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
 Returns whether the polytope <A>P</A> is tight, meaning that
 it has a Schlafli symbol {k_1, ..., k_{n-1}} and has
 2 k_1 ... k_{n-1} flags, which is the minimum possible.
 This property doesn't make any sense for non-polytopal maniplexes, which
 aren't constrained by this lower bound.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsTight(ToroidalMap44([2,0]));
true
]]></Example>


<ManSection>
  <Attr Arg="M" Name="EulerCharacteristic" Label="for IsManiplex"/>
 <Returns>The Euler characteristic of the maniplex, given by  <Math>f_0 - f_1 + f_2 - \cdots + (-1)^{n-1} f_{n-1}</Math>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> EulerCharacteristic(Bk2lStar(3,5));
-10
]]></Example>


<ManSection>
  <Attr Arg="M" Name="Genus" Label="for IsManiplex"/>
 <Returns>The genus of the given 3-maniplex.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> Genus(Bk2lStar(3,5));
6
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsSpherical" Label="for IsManiplex"/>
 <Returns>Whether the 3-maniplex <A>M</A> is spherical, which is to say, whether the Euler characteristic is  equal to 2. 
</Returns>
 <Description>
<Example><![CDATA[
gap> IsSpherical(Simplex(3));
true
gap> IsSpherical(AbstractRegularPolytope([4,4],"h2^3"));
false
gap> IsSpherical(Pyramid(5));
true
gap> IsSpherical(CubicTiling(2));
false
]]></Example>


 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="IsLocallySpherical" Label="for IsManiplex"/>
 <Returns>Whether the 4-maniplex <A>M</A> is locally spherical, which is to say, whether its facets and vertex-figures  are both spherical.
</Returns>
 <Description>
<Example><![CDATA[
gap> IsLocallySpherical(Simplex(4));
true
gap> IsLocallySpherical(AbstractRegularPolytope([4,4,4]));
false
gap> IsLocallySpherical(CubicTiling(3));
true
gap> IsLocallySpherical(Pyramid(Cube(3)));
true
]]></Example>


 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="IsToroidal" Label="for IsManiplex"/>
 <Returns>Whether the 3-maniplex <A>M</A> is toroidal, which is to say, whether the Euler characteristic is  equal to 0. 
</Returns>
 <Description>
<Example><![CDATA[
gap> IsToroidal(Simplex(3));
false
gap> IsToroidal(AbstractRegularPolytope([4,4],"h2^3"));
true
gap> IsToroidal(Pyramid(5));
false
]]></Example>


 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="IsLocallyToroidal" Label="for IsManiplex"/>
 <Returns>Whether the 4-maniplex <A>M</A> is locally toroidal, which is to say, whether it has at least one toroidal facet  or vertex-figure, and all of its facets and vertex-figures are either spherical or toroidal.
</Returns>
 <Description>
<Example><![CDATA[
gap> IsLocallyToroidal(Simplex(4));
false
gap> IsLocallyToroidal(AbstractRegularPolytope([4,4,3],"(r0 r1 r2 r1)^2"));
true
gap> IsLocallyToroidal(AbstractRegularPolytope([4,4,4],"(r0 r1 r2 r1)^2, (r1 r2 r3 r2)^2"));
true
]]></Example>


 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Combinatorics_and_Structure_Section_Orientability">
<Heading>Orientability</Heading>

<ManSection>
  <Prop Arg="M" Name="IsOrientable" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
A maniplex is orientable if its flag graph is bipartite.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsOrientable(HemiCube(3));
false
gap> IsOrientable(Cube(3));
true
]]></Example>


<ManSection>
  <Oper Arg="M, I" Name="IsIOrientable" Label="for IsManiplex, IsList"/>
 <Description>
For a subset I of {0, ..., n-1}, a maniplex is I-orientable
 if every closed path in its flag graph contains an even number
 of edges with colors in I.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsIOrientable(HemiCube(3),[1,2]);
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsVertexBipartite" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
A maniplex is vertex-bipartite if its 1-skeleton is
 bipartite. This is equivalent to being I-orientable for
 I = {0}.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsVertexBipartite(HemiCube(4));
true
]]></Example>


<ManSection>
  <Prop Arg="M" Name="IsFacetBipartite" Label="for IsManiplex"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
A maniplex is facet-bipartite if the 1-skeleton of its
 dual is bipartite. This is equivalent to being I-orientable for
 I = {n-1}.
 </Description>
</ManSection>


<Example><![CDATA[
gap> IsFacetBipartite(HemiCube(4));
false
]]></Example>


<ManSection>
  <Attr Arg="M" Name="OrientableCover" Label="for IsManiplex"/>
 <Description>
Returns the minimal <Emph>orientable cover</Emph> of the maniplex <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> OrientableCover(HemiCube(3))=Cube(3);
true
]]></Example>


<ManSection>
  <Oper Arg="M, I" Name="IOrientableCover" Label="for IsManiplex, IsList"/>
 <Description>
Returns the minimal <Emph>I-orientable cover</Emph> of the maniplex <A>M</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> SchlafliSymbol(IOrientableCover(Cube(3), [2]));
[ 4, 6 ]
]]></Example>


</Section>


<Section Label="Chapter_Combinatorics_and_Structure_Section_Zigzags_and_holes">
<Heading>Zigzags and holes</Heading>

<ManSection>
  <Oper Arg="M, j" Name="ZigzagLength" Label="for IsManiplex, IsInt"/>
 <Returns>The lengths of <A>j</A>-zigzags of the 3-maniplex <A>M</A>.
</Returns>
 <Description>
This corresponds to the lengths of orbits under r0 (r1 r2)^j.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ZigzagLength(Cube(3),1);
6
gap> ZigzagLength(Cube(3),2);
6
gap> ZigzagLength(Cube(3),3);
2
]]></Example>


<ManSection>
  <Attr Arg="M" Name="ZigzagVector" Label="for IsManiplex"/>
 <Returns>The lengths of all zigzags of the 3-maniplex <A>M</A>.
</Returns>
 <Description>
A rank 3 maniplex of type {p, q} has Floor(q/2) distinct zigzag lengths
 because the j-zigzags are the same as the (q-j)-zigzags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> ZigzagVector(Pseudorhombicuboctahedron());
[ [ 40, 56 ], [ 8, 32 ] ]
]]></Example>


<ManSection>
  <Attr Arg="M" Name="PetrieLength" Label="for IsManiplex"/>
 <Returns>The length of the petrie polygons of the maniplex <A>M</A>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> PetrieLength(Cube(3));
6
]]></Example>


<ManSection>
  <Oper Arg="i, j" Name="PetrieRelation" Label="for IsInt, IsInt"/>
 <Returns>relation
</Returns>
 <Description>
Returns the Petrie relation for a rank <A>i</A> maniplex of length <A>j</A>.
 </Description>
</ManSection>


<Example><![CDATA[
gap> p:=PetrieRelation(3,3);
"(r0r1r2)^3"
gap> q:=Cube(3)/p;
3-maniplex
gap> Size(q);
24
]]></Example>


<ManSection>
  <Oper Arg="M, j" Name="HoleLength" Label="for IsManiplex, IsInt"/>
 <Returns>The lengths of <A>j</A>-holes of the 3-maniplex <A>M</A>.
</Returns>
 <Description>
This corresponds to the lengths of orbits under r0 (r1 r2)^(j-1) r2.
 </Description>
</ManSection>


<Example><![CDATA[
gap> HoleLength(ToroidalMap44([3,0]),2);
3
]]></Example>


<ManSection>
  <Attr Arg="M" Name="HoleVector" Label="for IsManiplex"/>
 <Returns>The lengths of all zigzags of the 3-maniplex <A>M</A>.
</Returns>
 <Description>
A rank 3 maniplex of type {p, q} has Floor(q/2) distinct zigzag lengths
 because the j-zigzags are the same as the (q-j)-zigzags.
 </Description>
</ManSection>


<Example><![CDATA[
gap> HoleVector(ToroidalMap44([3,0],[0,5]));
[ [ 3, 5 ] ]
]]></Example>


</Section>


</Chapter>

