##INPUT IS EDGE LABELED GRAPH IN GAP.
##OUTPUT IS CODE TO COPY INTO MATHEMATICA.
## CAN PUT OTHER LANGUAGES IN AS NEEDED
DeclareOperation("ViewGraph",[IsEdgeLabeledGraph, IsString]);
InstallMethod(ViewGraph,
[IsEdgeLabeledGraph, IsString],
function(g,s)
local ans, verts, eds, labs, bad, i;
if s = "Mathematica" or s = "mathematica" or s = "MATHEMATICA" then
ans:="Mathematica Code: GraphPlot[{";
verts:=Vertices(g);
eds:=Edges(g);
labs:=Labels(g);
for i in [1..Size(eds)-1] do
if Size(eds[i]) =2 then
ans:=Concatenation(ans,"{", String( eds[i][1]), " ->",  String(eds[i][2]), " , " , String(labs[i]), " },");
elif Size(eds[i]) =1 then
ans:=Concatenation(ans,"{", String( eds[i][1]), " ->",  String(eds[i][1]), " , " , String(labs[i]), " },");
fi;
od;
i:=Size(eds);
if Size(eds[i]) =2 then
ans:=Concatenation(ans,"{", String( eds[i][1]), " ->",  String(eds[i][2]), " , " , String(labs[i]), " }},");
elif Size(eds[i]) =1 then
ans:=Concatenation(ans,"{", String( eds[i][1]), " ->",  String(eds[i][1]), " , " , String(labs[i]), " }},");
fi;
ans:=Concatenation(ans, "VertexLabels -> Placed[Automatic, Center], VertexSize -> .5, MultiedgeStyle -> True] ");
return ans;

else
bad:="That graph visualization is not supported yet. Currently Sage and Mathematica are supported.";
return bad;
fi;










 end);


InstallOtherMethod(ViewGraph,
[IsEdgeLabeledGraph],
function(g)
return ViewGraph(g,"Mathematica");
end);


##INPUT IS GRAPH IN GAP.
##OUTPUT IS CODE TO COPY INTO SAGE.
## CAN PUT OTHER LANGUAGES IN AS NEEDED
## IN SAGE Follow with:
##  P= G.plot()
##  P.show() 
DeclareOperation("ViewGraph",[IsObject, IsString]);
InstallMethod(ViewGraph,
[IsObject, IsString],
function(g,s)
local ans, eds, verts, A, i, j,bad;
if not IsGraph(g) then
return "Not a graph";
fi;
if s = "Sage" or s = "sage" or s = "SAGE" then
 ans:="";
 verts:=Vertices(g);
 ans:=Concatenation(ans,"G= Graph({");
 for i in [1..Size(verts)-1] do
 A:=Adjacency( g, i );;
 ans:=Concatenation(ans,String(verts[i]));
 ans:=Concatenation(ans,":[");
 for j in [1..Size(A)-1] do
 ans:=Concatenation(ans,String(A[j]));
 ans:=Concatenation(ans,",");
 od;
 ans:=Concatenation(ans,String(A[Size(A)]));
 ans:=Concatenation(ans,"],");
 od;
 ans:=Concatenation(ans,String(verts[Size(verts)]));
 ans:=Concatenation(ans,":[");
 A:=Adjacency( g, verts[Size(verts)] );
 for j in [1..Size(A)-1] do
 ans:=Concatenation(ans,String(A[j]));
 ans:=Concatenation(ans,",");
 od;
 ans:=Concatenation(ans,String(A[Size(A)]));
 ans:=Concatenation(ans,"]})");
 Print( "Sage Code:  Follow by P= G.plot();  P.show() \n" );
return(ans);
##OUTPUT IS CODE TO COPY INTO MATHEMATICA.
elif s = "Mathematica" or s = "mathematica" or s = "MATHEMATICA" then
ans:= "GraphPlot[{";
verts:=Vertices(g);
eds:=UndirectedEdges(g);
for i in [1..Size(eds)-1] do
if Size(eds[i]) =2 then
ans:=Concatenation(ans, String( eds[i][1]), " ->",  String(eds[i][2]),   " ,");
elif Size(eds[i]) =1 then
ans:=Concatenation(ans, String( eds[i][1]), " ->",  String(eds[i][1]),   " ,");
fi;
od;
i:=Size(eds);
if Size(eds[i]) =2 then
ans:=Concatenation(ans, String( eds[i][1]), " ->",  String(eds[i][2]),  " },");
elif Size(eds[i]) =1 then
ans:=Concatenation(ans, String( eds[i][1]), " ->",  String(eds[i][1]),  " },");
fi;
ans:=Concatenation(ans, "VertexLabels -> Placed[Automatic, Center], VertexSize -> .5, MultiedgeStyle -> True] ");
Print( "Mathematica code: \n" );
return ans;
else
bad:="That graph visualization is not supported yet. Currently Sage and Mathematica are supported.";
return bad;
fi;
 end);

##  P= G.plot()
##  P.show() 


InstallOtherMethod(ViewGraph,
[IsObject],
function(g)
return ViewGraph(g,"Mathematica");
end);