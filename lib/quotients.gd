
#! @Chapter Comparing maniplexes
#! @Section Quotients and covers

DeclareGlobalFunction("CouldBeQuotient");

#! @Arguments M1, M2
#! Returns whether <A>M2</A> is a quotient of <A>M1</A>.
DeclareOperation("IsQuotient", [IsManiplex, IsManiplex]);

#! @Arguments g, h
#! Returns whether <A>h</A> is a quotient of <A>g</A>.
#! That is, whether there is a homomorphism sending each generator of g
#! to the corresponding generator of h.
DeclareOperation("IsQuotient", [IsSggi, IsSggi]);

#! @Arguments M1, M2
#! Returns whether <A>M2</A> is a cover of <A>M1</A>.
DeclareOperation("IsCover", [IsManiplex, IsManiplex]);

#! @Arguments M1, M2
#! Returns whether <A>M1</A> is isomorphic to <A>M2</A>.
DeclareOperation("IsIsomorphicManiplex", [IsManiplex, IsManiplex]);

#! @Arguments M
#! Returns the smallest regular cover of <A>M</A>, which is the
#! maniplex whose automorphism group is the connection group
#! of <A>M</A>.
DeclareAttribute("SmallestRegularCover", IsManiplex);

#! @Arguments M, relStr
#! Given a reflexible maniplex <A>M</A>, generates the subgroup S of
#! AutomorphismGroup(<A>M</A>) given by relStr, and returns the quotient
#! maniplex M / S.
#! For example, QuotientManiplex(CubicTiling(2), "(r0 r1 r2 r1)^5, (r1 r0 r1 r2)^2")
#! returns the toroidal map {4,4}_{(5,0),(0,2)}.
#! You can also input this as CubicTiling(2) / "(r0 r1 r2 r1)^5, (r1 r0 r1 r2)^2".
DeclareOperation("QuotientManiplex", [IsReflexibleManiplex, IsString]);

#! @Arguments M, rels
#! Given a reflexible maniplex <A>M</A>, generates the normal closure N of
#! the subgroup S of AutomorphismGroup(<A>M</A>) given by relStr, and returns 
#! the quotient maniplex M / N, which will be reflexible.
#! For example, QuotientManiplex(CubicTiling(2), "(r0 r1 r2 r1)^5, (r1 r0 r1 r2)^2")
#! returns the toroidal map {4,4}_{(1,0)}, because the normal closure of the group
#! generated by (r0 r1 r2 r1)^5 and (r1 r0 r1 r2)^2 is the group generated by r0 r1 r2 r1
#! and r1 r0 r1 r2.
DeclareOperation("ReflexibleQuotientManiplex", [IsManiplex, IsList]);

#! @Arguments g, rels
#! @Returns the quotient of <A>g</A> by <A>rels</A>, which is either a list
#! of Tietze words or a string of relations that is parsed by ParseStringCRels.
#! @Description
#! @BeginExampleSession
#! gap> g := UniversalSggi(3);
#! <fp group of size infinity on the generators [ r0, r1, r2 ]>
#! gap> h := QuotientSggi(g, "(r0 r1)^5, (r1 r2)^3, (r0 r1 r2)^5");
#! <fp group on the generators [ r0, r1, r2 ]>
#! gap> Size(h);
#! 60
#! @EndExampleSession
DeclareOperation("QuotientSggi", [IsGroup, IsList]);

#! @Arguments g, n
#! @Returns g/n
#! @Description Given an sggi <A>g</A> and a normal subgroup <A>n</A> in <A>g</A>, this function will give you the quotient in a way that respects the generators (i.e., the generators of the quotient will be the images of the generators of the original group).
DeclareOperation("QuotientSggiByNormalSubgroup",[IsGroup,IsGroup]);