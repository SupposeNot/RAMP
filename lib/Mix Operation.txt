#! @Arguments M1, M2
#! Returns the Mix of the connection groups of M1 and M2.
DeclareOperation("Mix", [IsReflexibleManiplex, IsReflexibleManiplex]);

InstallMethod(Mix,
	[IsReflexibleManiplex, IsReflexibleManiplex],
	function(p,q)
	local gp, gq, gens1, r1, gens2, r2, N1, gensnew, i, L1, L2;
	gp:= ConnectionGroup(p);
	gq:= ConnectionGroup(q);
	gens1:=GeneratorsOfGroup(gp);
	r1:=Size(gens1);
	gens2:=GeneratorsOfGroup(gq);
	r2:=Size(gens2);	
	N1:=Size(MovedPoints(gp));
	gensnew:=[];
	for i in [1..Maximum(r1,r2)] do	
		if i > r1 then
		L1:=[1..N1];
		else
		L1:=ListPerm(gens1[i]);
		fi;
		if i > r2 then
		L2:=[N1+1 .. N1+Size(MovedPoints(gq))];
		else
		L2:=ListPerm(gens2[i])+N1;
		fi;
		Append(L1,L2);
		Add(gensnew,PermList(L1));
	od; 
	return ReflexibleManiplex(Group(gensnew));
	end);


#! @Arguments gp, gq
#! Returns the Mix of two Finitely Presented groups gp and gq.
DeclareOperation("Mix", [IsFpGroup, IsFpGroup]);
InstallMethod(Mix,
	[IsFpGroup, IsFpGroup],
	function(gp,gq)
	local r1, r2, D, Dgens, gensnew, i;
	r1:=Size(GeneratorsOfGroup(gp));
	r2:=Size(GeneratorsOfGroup(gq));
	D:=DirectProduct(gp,gq);
	Dgens:=GeneratorsOfGroup(D);
	gensnew:=[];
	for i in [1..Minimum(r1,r2)] do
	Add(gensnew,Dgens[i]*Dgens[i+r1]);
	od;
	for i in [Minimum(r1,r2)+1.. Maximum(r1,r2)] do
	if r1 < r2 then
	Add(gensnew,Dgens[r1+i]);
	else
	Add(gensnew,Dgens[i]);
	fi;
	od;
	return Group(gensnew);
	end);


